--- pacmice.lua
--
-- Pacmouse: -sees mice- "Nom nom nom!".
--
-- To create a new map:
--	- Add the map to the rotation, in the settings with `pathes` being `{{0, 0}}`.
--	- Play the map.
--	- Use `!set pacmice_cur_pilot YourName#3752`.
--	- Click on a free cell, then use arrows to travel the entire map, every possible path.
--	- Use `!call pacmice_GridExportPathes YourName#3752`.
--	- Copy the output, remove the new lines, and add this as the `pathes` field.
--
-- @author TFM:Pshy#3752 DC:Pshy#7998 (script)
-- @author TFM:Nnaaaz#0000 (map)
--
-- @require pshy_commands.lua
-- @require pshy_scores.lua
-- @require pshy_lua_commands.lua
-- @require pshy_splashscreen.lua
-- @require pshy_keycodes.lua
-- @require pshy_utils.lua
-- @require pshy_loopmore.lua
-- @require pshy_rotations.lua



--- help Page:
pshy.help_pages["pacmice"] = {back = "", title = "PacMice", text = "Oh no!\n", commands = {}}
pshy.help_pages[""].subpages["pacmice"] = pshy.help_pages["pacmice"]



--- TFM Settings
tfm.exec.disableAutoNewGame(true)
tfm.exec.disableAutoShaman(true)
tfm.exec.disableAfkDeath(true)
tfm.exec.disableAutoTimeLeft(true)



--- Pshy Settings:
pshy.perms_auto_admin_authors = true
pshy.authors["Nnaaaz#0000"] = true
pshy.splashscreen_image = "17acb076edb.png"	-- splash image
pshy.splashscreen_x = 150					-- x location
pshy.splashscreen_y = 100					-- y location
pshy.splashscreen_sx = 1					-- scale on x
pshy.splashscreen_sy = 1					-- scale on y
pshy.splashscreen_text = nil
pshy.splashscreen_duration = 8 * 1000		-- pacmice screen duration
pshy.rotations_auto_next_map = false



--- Module Settings:
pacmice_maps = {}						-- game maps tables
table.insert(pacmice_maps, {x = 91, y = 29, cell_w = 26, cell_h = 26, wall_size = 14, web_x = -100, pac_count = 1, xml = [[<C><P H="720" /><Z><S><S T="12" X="168" Y="107" L="56" H="56" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="613" Y="107" L="56" H="56" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="286" Y="107" L="79" H="56" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="495" Y="107" L="79" H="56" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="247" Y="263" L="10" H="160" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="533" Y="263" L="10" H="160" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="390" Y="29" L="605" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="91" Y="130" L="10" H="210" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="690" Y="130" L="10" H="210" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="141" Y="237" L="110" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="641" Y="237" L="108" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="196" Y="276" L="10" H="87" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="586" Y="277" L="10" H="88" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="143" Y="316" L="113" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="636" Y="316" L="101" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="91" Y="343" L="10" H="60" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="689" Y="342" L="10" H="62" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="145" Y="368" L="111" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="635" Y="368" L="100" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="196" Y="408" L="10" H="83" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="586" Y="406" L="10" H="87" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="145" Y="445" L="105" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="638" Y="445" L="105" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="90" Y="575" L="10" H="270" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="690" Y="575" L="10" H="270" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="390" Y="706" L="608" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="390" Y="82" L="32" H="108" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="392" Y="186" L="180" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="391" Y="445" L="176" H="10" P="0,0,0.3,0.2,360,0,0,0"/><S T="12" X="389" Y="550" L="177" H="10" P="0,0,0.3,0.2,360,0,0,0"/><S T="12" X="234" Y="655" L="185" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="547" Y="655" L="184" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="170" Y="186" L="50" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="612" Y="186" L="50" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="390" Y="214" L="32" H="56" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="390" Y="476" L="32" H="55" P="0,0,0.5,0.2,360,0,0,0"/><S T="12" X="390" Y="603" L="32" H="103" P="0,0,0.5,0.2,360,0,0,0"/><S T="12" X="172" Y="498" L="55" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="609" Y="498" L="55" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="195" Y="549" L="10" H="107" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="586" Y="549" L="10" H="107" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="286" Y="498" L="73" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="495" Y="498" L="75" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="247" Y="420" L="10" H="55" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="533" Y="420" L="10" H="56" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="248" Y="600" L="10" H="100" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="533" Y="600" L="10" H="99" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="289" Y="238" L="75" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="493" Y="238" L="75" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="118" Y="576" L="52" H="54" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="663" Y="576" L="52" H="54" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="391" Y="393" L="190" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="300" Y="343" L="10" H="109" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="481" Y="343" L="10" H="108" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="325" Y="292" L="60" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="455" Y="292" L="60" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="312" Y="602" L="30" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="469" Y="602" L="30" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="390" Y="292" L="67" H="10" P="0,0,0.3,0.2,0,0,0,0" v="90000"/><S T="12" X="387" Y="724" L="10" H="10" P="1,0,0.3,0.2,0,1,0,0" c="4" v="90000"/></S><D><F X="390" Y="381"/><T X="392" Y="387" D=""/><DS X="388" Y="270"/></D><O/><L><JD c="000000,250,1,0" P1="-1600,800" P2="2400,800"/><JD c="000000,250,1,0" P1="-1600,1000" P2="2400,1000"/><JD c="000000,250,1,0" P1="-1600,1200" P2="2400,1200"/><JD c="000000,250,1,0" P1="-1600,600" P2="2400,600"/><JD c="000000,250,1,0" P1="-1600,400" P2="2400,400"/><JD c="000000,250,1,0" P1="-1600,200" P2="2400,200"/><JD c="000000,250,1,0" P1="-1600,0" P2="2400,0"/><JD c="000000,250,1,0" P1="-1600,-200" P2="2400,-200"/><JD c="000000,250,1,0" P1="-1600,-400" P2="2400,-400"/><JD c="1500fb,10,1,0" P1="91,29" P2="690,29"/><JD c="1500fb,10,1,0" P1="91,706" P2="690,706"/><JD c="1500fb,10,1,0" P1="91,30" P2="91,236"/><JD c="1500fb,10,1,0" P1="690,30" P2="690,236"/><JD c="1500fb,10,1,0" P1="91,446" P2="91,704"/><JD c="1500fb,10,1,0" P1="690,446" P2="690,704"/><JD c="1500fb,10,1,0" P1="91,237" P2="195,237"/><JD c="1500fb,10,1,0" P1="690,237" P2="586,237"/><JD c="1500fb,10,1,0" P1="149,186" P2="191,186"/><JD c="1500fb,10,1,0" P1="632,186" P2="590,186"/><JD c="1500fb,10,1,0" P1="301,292" P2="352,292"/><JD c="1500fb,10,1,0" M1="59" M2="59" P1="363,292" P2="419,292"/><JD c="1500fb,10,1,0" P1="480,292" P2="429,292"/><JD c="1500fb,10,1,0" P1="249,238" P2="322,238"/><JD c="1500fb,10,1,0" P1="532,238" P2="459,238"/><JD c="1500fb,10,1,0" P1="92,316" P2="195,316"/><JD c="1500fb,10,1,0" P1="689,316" P2="586,316"/><JD c="1500fb,10,1,0" P1="92,368" P2="195,368"/><JD c="1500fb,10,1,0" P1="689,368" P2="586,368"/><JD c="1500fb,10,1,0" P1="91,445" P2="195,445"/><JD c="1500fb,10,1,0" P1="690,445" P2="586,445"/><JD c="1500fb,10,1,0" P1="307,445" P2="476,445"/><JD c="1500fb,10,1,0" P1="302,393" P2="479,393"/><JD c="1500fb,10,1,0" P1="307,186" P2="478,186"/><JD c="1500fb,10,1,0" P1="305,550" P2="474,550"/><JD c="1500fb,10,1,0" P1="145,655" P2="323,655"/><JD c="1500fb,10,1,0" P1="636,655" P2="458,655"/><JD c="000000,6,1,0" P1="91,30" P2="91,236"/><JD c="000000,6,1,0" P1="690,30" P2="690,236"/><JD c="000000,6,1,0" P1="91,706" P2="690,706"/><JD c="1500fb,10,1,0" P1="148,498" P2="195,498"/><JD c="1500fb,10,1,0" P1="633,498" P2="586,498"/><JD c="1500fb,10,1,0" P1="254,498" P2="318,498"/><JD c="1500fb,10,1,0" P1="527,498" P2="463,498"/><JD c="1500fb,10,1,0" P1="301,602" P2="322,602"/><JD c="1500fb,10,1,0" P1="480,602" P2="459,602"/><JD c="1500fb,10,1,0" P1="195.5,237.5" P2="195.5,315.5"/><JD c="1500fb,10,1,0" P1="585.5,237.5" P2="585.5,315.5"/><JD c="1500fb,10,1,0" P1="300.5,294" P2="300.5,392"/><JD c="1500fb,10,1,0" P1="480.5,294" P2="480.5,392"/><JD c="1500fb,10,1,0" P1="247.5,186.5" P2="247.5,338.5"/><JD c="1500fb,10,1,0" P1="533.5,186.5" P2="533.5,338.5"/><JD c="1500fb,10,1,0" P1="195.5,368" P2="195.5,445"/><JD c="1500fb,10,1,0" P1="585.5,368" P2="585.5,445"/><JD c="000000,6,1,0" P1="91,446" P2="91,704"/><JD c="000000,6,1,0" P1="690,446" P2="690,704"/><JD c="1500fb,10,1,0" P1="247.5,397" P2="247.5,443"/><JD c="1500fb,10,1,0" P1="533.5,397" P2="533.5,443"/><JD c="1500fb,10,1,0" P1="195.5,498" P2="195.5,600"/><JD c="1500fb,10,1,0" P1="585.5,498" P2="585.5,600"/><JD c="1500fb,10,1,0" P1="247.5,553" P2="247.5,655"/><JD c="1500fb,10,1,0" P1="533.5,553" P2="533.5,655"/><JD c="1500fb,10,1,0" P1="91.5,316" P2="91.5,367"/><JD c="1500fb,10,1,0" P1="689.5,316" P2="689.5,367"/><JD c="000000,6,1,0" P1="91,237" P2="195,237"/><JD c="000000,6,1,0" P1="690,237" P2="586,237"/><JD c="000000,6,1,0" P1="149,186" P2="191,186"/><JD c="000000,6,1,0" P1="632,186" P2="590,186"/><JD c="000000,6,1,0" P1="301,292" P2="352,292"/><JD c="000000,6,1,0" M1="59" M2="59" P1="363,292" P2="419,292"/><JD c="000000,6,1,0" P1="480,292" P2="429,292"/><JD c="000000,6,1,0" P1="249,238" P2="322,238"/><JD c="000000,6,1,0" P1="532,238" P2="459,238"/><JD c="000000,6,1,0" P1="92,316" P2="195,316"/><JD c="000000,6,1,0" P1="689,316" P2="586,316"/><JD c="000000,6,1,0" P1="92,368" P2="195,368"/><JD c="000000,6,1,0" P1="689,368" P2="586,368"/><JD c="000000,6,1,0" P1="91,445" P2="195,445"/><JD c="000000,6,1,0" P1="690,445" P2="586,445"/><JD c="000000,6,1,0" P1="307,445" P2="476,445"/><JD c="000000,6,1,0" P1="302,393" P2="479,393"/><JD c="000000,6,1,0" P1="145,655" P2="323,655"/><JD c="000000,6,1,0" P1="636,655" P2="458,655"/><JD c="000000,6,1,0" P1="148,498" P2="195,498"/><JD c="000000,6,1,0" P1="633,498" P2="586,498"/><JD c="000000,6,1,0" P1="254,498" P2="318,498"/><JD c="000000,6,1,0" P1="527,498" P2="463,498"/><JD c="000000,6,1,0" P1="301,602" P2="322,602"/><JD c="000000,6,1,0" P1="480,602" P2="459,602"/><JD c="000000,6,1,0" P1="195.5,237.5" P2="195.5,315.5"/><JD c="000000,6,1,0" P1="585.5,237.5" P2="585.5,315.5"/><JD c="000000,6,1,0" P1="300.5,294" P2="300.5,392"/><JD c="000000,6,1,0" P1="480.5,294" P2="480.5,392"/><JD c="000000,6,1,0" P1="247.5,186.5" P2="247.5,338.5"/><JD c="000000,6,1,0" P1="533.5,186.5" P2="533.5,338.5"/><JD c="000000,6,1,0" P1="195.5,368" P2="195.5,445"/><JD c="000000,6,1,0" P1="585.5,368" P2="585.5,445"/><JD c="000000,6,1,0" P1="247.5,397" P2="247.5,443"/><JD c="000000,6,1,0" P1="533.5,397" P2="533.5,443"/><JD c="000000,6,1,0" P1="195.5,498" P2="195.5,600"/><JD c="000000,6,1,0" P1="585.5,498" P2="585.5,600"/><JD c="000000,6,1,0" P1="247.5,553" P2="247.5,655"/><JD c="000000,6,1,0" P1="533.5,553" P2="533.5,655"/><JD c="000000,6,1,0" P1="91.5,316" P2="91.5,367"/><JD c="000000,6,1,0" P1="689.5,316" P2="689.5,367"/><JD c="1500fb,3,1,0" P1="141,80" P2="195,80"/><JD c="1500fb,3,1,0" P1="640,80" P2="586,80"/><JD c="1500fb,3,1,0" P1="248,80" P2="324,80"/><JD c="1500fb,3,1,0" P1="533,80" P2="457,80"/><JD c="1500fb,3,1,0" P1="195,81" P2="195,134"/><JD c="1500fb,3,1,0" P1="586,81" P2="586,134"/><JD c="1500fb,3,1,0" P1="324,81" P2="324,134"/><JD c="1500fb,3,1,0" P1="375,33" P2="375,134"/><JD c="1500fb,3,1,0" P1="375,189" P2="375,240"/><JD c="1500fb,3,1,0" P1="375,450" P2="375,502"/><JD c="1500fb,3,1,0" P1="375,553" P2="375,653"/><JD c="1500fb,3,1,0" P1="405,33" P2="405,134"/><JD c="1500fb,3,1,0" P1="405,189" P2="405,240"/><JD c="1500fb,3,1,0" P1="404.88,450" P2="404.88,502"/><JD c="1500fb,3,1,0" P1="405,553" P2="405,653"/><JD c="1500fb,3,1,0" P1="457,81" P2="457,134"/><JD c="1500fb,3,1,0" P1="141,81" P2="141,134"/><JD c="1500fb,3,1,0" P1="640,81" P2="640,134"/><JD c="1500fb,3,1,0" P1="248,81" P2="248,134"/><JD c="000000,6,1,0" P1="307,186" P2="478,186"/><JD c="1500fb,3,1,0" P1="533,81" P2="533,134"/><JD c="1500fb,3,1,0" P1="141,134" P2="195,134"/><JD c="1500fb,3,1,0" P1="640,134" P2="586,134"/><JD c="1500fb,3,1,0" P1="248,134.5" P2="324,134.5"/><JD c="1500fb,3,1,0" P1="375,134.5" P2="405,134.5"/><JD c="000000,6,1,0" P1="305,550" P2="474,550"/><JD c="1500fb,3,1,0" P1="375,240.5" P2="405,240.5"/><JD c="1500fb,3,1,0" P1="375,502.5" P2="405,502.5"/><JD c="000000,6,1,0" P1="91,29" P2="690,29"/><JD c="1500fb,3,1,0" P1="375,653.5" P2="405,653.5"/><JD c="1500fb,3,1,0" P1="533,134" P2="457,134"/><JD c="1500fb,3,1,0" P1="96,551" P2="143,551"/><JD c="1500fb,3,1,0" P1="685,551" P2="638,551"/><JD c="1500fb,3,1,0" P1="96,601" P2="143,601"/><JD c="1500fb,3,1,0" P1="685,601" P2="638,601"/><JD c="1500fb,3,1,0" P1="143,551" P2="143,601"/><JD c="1500fb,3,1,0" P1="638,551" P2="638,601"/><JD c="000000,5,1,0" P1="379,449" P2="401,449"/><JD c="000000,5,1,0" P1="379,554" P2="401,554"/><JD c="000000,5,1,0" P1="379,190" P2="401,190"/><JD c="000000,5,1,0" P1="379,33" P2="401,33"/><JD c="000000,5,1,0" P1="686,555" P2="686,597"/><JD c="000000,5,1,0" P1="95,555" P2="95,597"/><JR M1="25" M2="59"/></L></Z></C>]]})
pacmice_maps[#pacmice_maps].pathes = {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {13, 1}, {14, 1}, {15, 1}, {16, 1}, {17, 1}, {18, 1}, {19, 1}, {20, 1}, {21, 1}, {22, 1}, {1, 2}, {5, 2}, {10, 2}, {13, 2}, {18, 2}, {22, 2}, {1, 3}, {5, 3}, {10, 3}, {13, 3}, {18, 3}, {22, 3}, {1, 4}, {5, 4}, {10, 4}, {13, 4}, {18, 4}, {22, 4}, {1, 5}, {2, 5}, {3, 5}, {4, 5}, {5, 5}, {6, 5}, {7, 5}, {8, 5}, {9, 5}, {10, 5}, {11, 5}, {12, 5}, {13, 5}, {14, 5}, {15, 5}, {16, 5}, {17, 5}, {18, 5}, {19, 5}, {20, 5}, {21, 5}, {22, 5}, {1, 6}, {5, 6}, {7, 6}, {16, 6}, {18, 6}, {22, 6}, {1, 7}, {2, 7}, {3, 7}, {4, 7}, {5, 7}, {7, 7}, {8, 7}, {9, 7}, {10, 7}, {13, 7}, {14, 7}, {15, 7}, {16, 7}, {18, 7}, {19, 7}, {20, 7}, {21, 7}, {22, 7}, {5, 8}, {10, 8}, {13, 8}, {18, 8}, {5, 9}, {7, 9}, {8, 9}, {9, 9}, {10, 9}, {11, 9}, {12, 9}, {13, 9}, {14, 9}, {15, 9}, {16, 9}, {18, 9}, {5, 10}, {7, 10}, {16, 10}, {18, 10}, {5, 11}, {7, 11}, {16, 11}, {18, 11}, {1, 12}, {2, 12}, {3, 12}, {4, 12}, {5, 12}, {7, 12}, {16, 12}, {18, 12}, {19, 12}, {20, 12}, {21, 12}, {22, 12}, {5, 13}, {6, 13}, {7, 13}, {16, 13}, {17, 13}, {18, 13}, {5, 14}, {7, 14}, {16, 14}, {18, 14}, {5, 15}, {7, 15}, {8, 15}, {9, 15}, {10, 15}, {11, 15}, {12, 15}, {13, 15}, {14, 15}, {15, 15}, {16, 15}, {18, 15}, {5, 16}, {7, 16}, {16, 16}, {18, 16}, {1, 17}, {2, 17}, {3, 17}, {4, 17}, {5, 17}, {6, 17}, {7, 17}, {8, 17}, {9, 17}, {10, 17}, {13, 17}, {14, 17}, {15, 17}, {16, 17}, {17, 17}, {18, 17}, {19, 17}, {20, 17}, {21, 17}, {22, 17}, {1, 18}, {5, 18}, {10, 18}, {13, 18}, {18, 18}, {22, 18}, {1, 19}, {2, 19}, {3, 19}, {5, 19}, {6, 19}, {7, 19}, {8, 19}, {9, 19}, {10, 19}, {11, 19}, {12, 19}, {13, 19}, {14, 19}, {15, 19}, {16, 19}, {17, 19}, {18, 19}, {20, 19}, {21, 19}, {22, 19}, {3, 20}, {5, 20}, {7, 20}, {16, 20}, {18, 20}, {20, 20}, {3, 21}, {5, 21}, {7, 21}, {8, 21}, {9, 21}, {10, 21}, {13, 21}, {14, 21}, {15, 21}, {16, 21}, {18, 21}, {20, 21}, {3, 22}, {5, 22}, {7, 22}, {10, 22}, {13, 22}, {16, 22}, {18, 22}, {20, 22}, {1, 23}, {2, 23}, {3, 23}, {4, 23}, {5, 23}, {7, 23}, {8, 23}, {9, 23}, {10, 23}, {13, 23}, {14, 23}, {15, 23}, {16, 23}, {18, 23}, {19, 23}, {20, 23}, {21, 23}, {22, 23}, {1, 24}, {10, 24}, {13, 24}, {22, 24}, {1, 25}, {2, 25}, {3, 25}, {4, 25}, {5, 25}, {6, 25}, {7, 25}, {8, 25}, {9, 25}, {10, 25}, {11, 25}, {12, 25}, {13, 25}, {14, 25}, {15, 25}, {16, 25}, {17, 25}, {18, 25}, {19, 25}, {20, 25}, {21, 25}, {22, 25}}
table.insert(pacmice_maps, {x = 91, y = 39, cell_w = 26, cell_h = 26, wall_size = 14, web_x = -100, pac_count = 1, xml = [[<C><P H="720" /><Z><S><S T="12" X="168" Y="91" L="56" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="612" Y="91" L="56" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="288" Y="91" L="84" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="492" Y="91" L="84" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="236" Y="142" L="84" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="544" Y="142" L="84" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="247" Y="536" L="58" H="10" P="0,0,0.3,0.2,-90,0,0,0"/><S T="12" X="533" Y="536" L="58" H="10" P="0,0,0.3,0.2,90,0,0,0"/><S T="12" X="208" Y="244" L="34" H="103" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="572" Y="244" L="34" H="103" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="120" Y="222" L="52" H="55" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="660" Y="222" L="52" H="55" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="390" Y="39" L="605" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="91" Y="91" L="10" H="114" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="91" Y="433" L="10" H="569" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="690" Y="91" L="10" H="113" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="690" Y="433" L="10" H="574" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="390" Y="716" L="608" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="390" Y="168" L="27" H="162" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="391" Y="234" L="137" H="32" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="325" Y="128" L="10" H="80" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="455" Y="128" L="10" H="80" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="273" Y="193" L="10" H="110" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="507" Y="193" L="10" H="109" P="0,0,0.5,0.2,0,0,0,0"/><S T="12" X="285" Y="560" L="10" H="84" P="0,0,0.5,0.2,-90,0,0,0"/><S T="12" X="495" Y="560" L="10" H="84" P="0,0,0.5,0.2,90,0,0,0"/><S T="12" X="119" Y="143" L="50" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="661" Y="143" L="50" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="390" Y="483" L="30" H="55" P="0,0,0.5,0.2,360,0,0,0"/><S T="12" X="390" Y="613" L="32" H="103" P="0,0,0.5,0.2,360,0,0,0"/><S T="12" X="173" Y="417" L="50" H="31" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="607" Y="417" L="50" H="31" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="118" Y="545" L="50" H="35" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="662" Y="545" L="50" H="35" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="181" Y="611" L="81" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="599" Y="611" L="81" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="237" Y="664" L="81" H="10" P="0,0,0.3,0.2,180,0,0,0"/><S T="12" X="543" Y="664" L="81" H="10" P="0,0,0.3,0.2,-180,0,0,0"/><S T="12" X="107" Y="325" L="23" H="60" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="673" Y="325" L="23" H="60" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="210" Y="351" L="81" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="570" Y="351" L="81" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="247" Y="401" L="10" H="107" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="532" Y="401" L="10" H="107" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="390" Y="507" L="10" H="183" P="0,0,0.3,0.2,90,0,0,0"/><S T="12" X="284" Y="454" L="10" H="83" P="0,0,0.3,0.2,90,0,0,0"/><S T="12" X="496" Y="454" L="10" H="83" P="0,0,0.3,0.2,-90,0,0,0"/><S T="12" X="143" Y="443" L="10" H="83" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="637" Y="443" L="10" H="83" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="195" Y="521" L="10" H="80" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="585" Y="521" L="10" H="80" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="143" Y="637" L="10" H="60" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="637" Y="637" L="10" H="60" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="273" Y="638" L="10" H="59" P="0,0,0.3,0.2,180,0,0,0"/><S T="12" X="507" Y="638" L="10" H="59" P="0,0,0.3,0.2,-180,0,0,0"/><S T="12" X="325" Y="662" L="10" H="105" P="0,0,0.3,0.2,180,0,0,0"/><S T="12" X="455" Y="662" L="10" H="105" P="0,0,0.3,0.2,-180,0,0,0"/><S T="12" X="209" Y="299" L="78" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="571" Y="299" L="78" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="391" Y="403" L="190" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="300" Y="353" L="10" H="109" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="480" Y="353" L="10" H="109" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="325" Y="302" L="60" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="455" Y="302" L="60" H="10" P="0,0,0.3,0.2,0,0,0,0"/><S T="12" X="390" Y="302" L="67" H="10" P="0,0,0.3,0.2,0,0,0,0" v="90000"/><S T="12" X="387" Y="733" L="10" H="10" P="1,0,0.3,0.2,0,1,0,0" c="4" v="90000"/></S><D><F X="390" Y="391"/><T X="392" Y="397" D=""/><DS X="390" Y="280"/></D><O/><L><JD c="000000,250,1,0" P1="-1620,1040" P2="2380,1040"/><JD c="000000,250,1,0" P1="-1610,840" P2="2390,840"/><JD c="000000,250,1,0" P1="-1610,640" P2="2390,640"/><JD c="000000,250,1,0" P1="-1610,440" P2="2390,440"/><JD c="000000,250,1,0" P1="-1610,240" P2="2390,240"/><JD c="000000,250,1,0" P1="-1610,40" P2="2390,40"/><JD c="000000,250,1,0" P1="-1600,-160" P2="2400,-160"/><JD c="000000,250,1,0" P1="-1590,-360" P2="2410,-360"/><JD c="1500fb,10,1,0" P1="91,39" P2="689,39"/><JD c="1500fb,10,1,0" P1="91,716" P2="689,716"/><JD c="1500fb,10,1,0" P1="91,40" P2="91,143"/><JD c="1500fb,10,1,0" P1="689,40" P2="689,143"/><JD c="1500fb,10,1,0" P1="91,199" P2="91,713"/><JD c="1500fb,10,1,0" P1="689,199" P2="689,713"/><JD c="1500fb,10,1,0" P1="273,143" P2="273,244"/><JD c="1500fb,10,1,0" P1="507,143" P2="507,244"/><JD c="1500fb,10,1,0" P1="325,91" P2="325,163"/><JD c="1500fb,10,1,0" P1="455,91" P2="455,163"/><JD c="1500fb,10,1,0" P1="272,142" P2="199,142"/><JD c="1500fb,10,1,0" P1="508,142" P2="581,142"/><JD c="1500fb,10,1,0" P1="244,299" P2="174,299"/><JD c="1500fb,10,1,0" M1="65" M2="65" P1="419,302" P2="361,302"/><JD c="1500fb,10,1,0" P1="536,299" P2="606,299"/><JD c="1500fb,10,1,0" P1="245,351" P2="174,351"/><JD c="1500fb,10,1,0" P1="535,351" P2="606,351"/><JD c="1500fb,10,1,0" P1="321,454" P2="249,454"/><JD c="1500fb,10,1,0" P1="478,507" P2="302,507"/><JD c="1500fb,10,1,0" P1="479,403" P2="301,403"/><JD c="1500fb,10,1,0" P1="459,454" P2="531,454"/><JD c="1500fb,10,1,0" P1="322,560" P2="249,560"/><JD c="1500fb,10,1,0" P1="458,560" P2="531,560"/><JD c="1500fb,10,1,0" P1="218,611" P2="144,611"/><JD c="1500fb,10,1,0" P1="562,611" P2="636,611"/><JD c="1500fb,10,1,0" P1="273,664" P2="200,664"/><JD c="1500fb,10,1,0" P1="507,664" P2="580,664"/><JD c="1500fb,10,1,0" P1="323,91" P2="250,91"/><JD c="1500fb,10,1,0" P1="457,91" P2="530,91"/><JD c="1500fb,10,1,0" P1="192,91" P2="144,91"/><JD c="1500fb,10,1,0" P1="588,91" P2="636,91"/><JD c="1500fb,10,1,0" P1="351,302" P2="301,302"/><JD c="1500fb,10,1,0" P1="429,302" P2="479,302"/><JD c="1500fb,10,1,0" P1="140,143" P2="92,143"/><JD c="1500fb,10,1,0" P1="640,143" P2="688,143"/><JD c="1500fb,10,1,0" P1="300,302" P2="300,403"/><JD c="1500fb,10,1,0" P1="480,302" P2="480,403"/><JD c="1500fb,10,1,0" P1="247,351" P2="247,454"/><JD c="1500fb,10,1,0" P1="533,351" P2="533,454"/><JD c="1500fb,10,1,0" P1="195,485" P2="195,557"/><JD c="1500fb,10,1,0" P1="585,485" P2="585,557"/><JD c="1500fb,10,1,0" P1="143,406" P2="143,479"/><JD c="1500fb,10,1,0" P1="637,406" P2="637,479"/><JD c="1500fb,10,1,0" P1="247,511" P2="247,560"/><JD c="1500fb,10,1,0" P1="533,511" P2="533,560"/><JD c="1500fb,10,1,0" P1="273,613" P2="273,664"/><JD c="1500fb,10,1,0" P1="507,613" P2="507,664"/><JD c="1500fb,10,1,0" P1="143,612" P2="143,663"/><JD c="1500fb,10,1,0" P1="637,612" P2="637,663"/><JD c="1500fb,10,1,0" P1="325,613" P2="325,716"/><JD c="1500fb,10,1,0" P1="455,613" P2="455,716"/><JD c="000000,6,1,0" P1="91,40" P2="91,143"/><JD c="000000,6,1,0" P1="689,40" P2="689,143"/><JD c="000000,6,1,0" P1="91,198" P2="91,713"/><JD c="000000,6,1,0" P1="689,198" P2="689,713"/><JD c="000000,6,1,0" P1="273,143" P2="273,244"/><JD c="000000,6,1,0" P1="507,143" P2="507,244"/><JD c="000000,6,1,0" P1="325,91" P2="325,163"/><JD c="000000,6,1,0" P1="455,91" P2="455,163"/><JD c="000000,6,1,0" P1="272,142" P2="199,142"/><JD c="000000,6,1,0" P1="508,142" P2="581,142"/><JD c="000000,6,1,0" P1="244,299" P2="174,299"/><JD c="000000,6,1,0" M1="65" M2="65" P1="419,302" P2="361,302"/><JD c="000000,6,1,0" P1="536,299" P2="606,299"/><JD c="000000,6,1,0" P1="245,351" P2="174,351"/><JD c="000000,6,1,0" P1="535,351" P2="606,351"/><JD c="1500fb,3,1,0" P1="141,403" P2="197,403"/><JD c="000000,6,1,0" P1="91,716" P2="689,716"/><JD c="1500fb,3,1,0" P1="639,403" P2="583,403"/><JD c="1500fb,3,1,0" P1="96,529" P2="142,529"/><JD c="1500fb,3,1,0" P1="684,529" P2="638,529"/><JD c="000000,6,1,0" P1="321,454" P2="249,454"/><JD c="000000,6,1,0" P1="478,507" P2="302,507"/><JD c="000000,6,1,0" P1="479,403" P2="301,403"/><JD c="000000,6,1,0" P1="459,454" P2="531,454"/><JD c="000000,6,1,0" P1="322,560" P2="249,560"/><JD c="000000,6,1,0" P1="458,560" P2="531,560"/><JD c="000000,6,1,0" P1="218,611" P2="144,611"/><JD c="000000,6,1,0" P1="562,611" P2="636,611"/><JD c="000000,6,1,0" P1="273,664" P2="200,664"/><JD c="000000,6,1,0" P1="507,664" P2="580,664"/><JD c="000000,6,1,0" P1="323,91" P2="250,91"/><JD c="000000,6,1,0" P1="457,91" P2="530,91"/><JD c="000000,6,1,0" P1="192,91" P2="144,91"/><JD c="000000,6,1,0" P1="588,91" P2="636,91"/><JD c="000000,6,1,0" P1="351,302" P2="301,302"/><JD c="000000,6,1,0" P1="429,302" P2="479,302"/><JD c="000000,6,1,0" P1="140,143" P2="92,143"/><JD c="000000,6,1,0" P1="640,143" P2="688,143"/><JD c="000000,6,1,0" P1="300,302" P2="300,403"/><JD c="000000,6,1,0" P1="480,302" P2="480,403"/><JD c="000000,6,1,0" P1="247,351" P2="247,454"/><JD c="000000,6,1,0" P1="533,351" P2="533,454"/><JD c="000000,6,1,0" P1="195,485" P2="195,557"/><JD c="000000,6,1,0" P1="585,485" P2="585,557"/><JD c="000000,6,1,0" P1="143,408" P2="143,479"/><JD c="000000,6,1,0" P1="637,407" P2="637,479"/><JD c="000000,6,1,0" P1="247,511" P2="247,560"/><JD c="000000,6,1,0" P1="533,511" P2="533,560"/><JD c="000000,6,1,0" P1="273,613" P2="273,664"/><JD c="000000,6,1,0" P1="507,613" P2="507,664"/><JD c="000000,6,1,0" P1="143,612" P2="143,663"/><JD c="000000,6,1,0" P1="637,612" P2="637,663"/><JD c="000000,6,1,0" P1="325,613" P2="325,716"/><JD c="000000,6,1,0" P1="455,613" P2="455,716"/><JD c="1500fb,3,1,0" P1="88,196" P2="144,196"/><JD c="1500fb,3,1,0" P1="692,196" P2="636,196"/><JD c="1500fb,3,1,0" P1="193,195" P2="223,195"/><JD c="1500fb,3,1,0" P1="376,563" P2="404,563"/><JD c="000000,6,1,0" P1="91,39" P2="689,39"/><JD c="1500fb,3,1,0" P1="376,457" P2="404,457"/><JD c="1500fb,3,1,0" P1="376,663" P2="404,663"/><JD c="1500fb,3,1,0" P1="587,195" P2="557,195"/><JD c="1500fb,3,1,0" P1="402,89" P2="378,89"/><JD c="1500fb,3,1,0" P1="458,220" P2="402,220"/><JD c="1500fb,3,1,0" P1="378,220" P2="324,220"/><JD c="1500fb,3,1,0" P1="458,249" P2="324,249"/><JD c="1500fb,3,1,0" P1="96,297" P2="117,297"/><JD c="1500fb,3,1,0" P1="684,297" P2="663,297"/><JD c="1500fb,3,1,0" P1="148,431" P2="196,431"/><JD c="1500fb,3,1,0" P1="632,431" P2="584,431"/><JD c="1500fb,3,1,0" P1="96,561" P2="142,561"/><JD c="1500fb,3,1,0" P1="684,561" P2="638,561"/><JD c="1500fb,3,1,0" P1="96,353" P2="117,353"/><JD c="1500fb,3,1,0" P1="684,353" P2="663,353"/><JD c="1500fb,3,1,0" P1="96,248" P2="144,248"/><JD c="1500fb,3,1,0" P1="684,248" P2="636,248"/><JD c="1500fb,3,1,0" P1="144,197" P2="144,248"/><JD c="1500fb,3,1,0" P1="324,220" P2="324,248"/><JD c="1500fb,3,1,0" P1="458,220" P2="458,248"/><JD c="1500fb,3,1,0" P1="636,197" P2="636,248"/><JD c="1500fb,3,1,0" P1="117,297" P2="117,353"/><JD c="1500fb,3,1,0" P1="663,297" P2="663,353"/><JD c="1500fb,3,1,0" P1="197,403" P2="197,431"/><JD c="1500fb,3,1,0" P1="404,457" P2="404,502"/><JD c="1500fb,3,1,0" P1="376,457" P2="376,502"/><JD c="1500fb,3,1,0" P1="583,403" P2="583,431"/><JD c="1500fb,3,1,0" P1="142.17,529" P2="142.17,560"/><JD c="1500fb,3,1,0" P1="637.83,529" P2="637.83,560"/><JD c="1500fb,3,1,0" P1="193,195" P2="193,294"/><JD c="1500fb,3,1,0" P1="376,563" P2="376,662"/><JD c="1500fb,3,1,0" P1="587,195" P2="587,294"/><JD c="1500fb,3,1,0" P1="401.79,89" P2="401.79,218"/><JD c="1500fb,3,1,0" P1="223,195" P2="223,294"/><JD c="1500fb,3,1,0" P1="404,563" P2="404,662"/><JD c="1500fb,3,1,0" P1="557,195" P2="557,294"/><JD c="1500fb,3,1,0" P1="378,89" P2="378,218"/><JR M1="17" M2="65"/><JD c="000000,3,1,0" P1="560,298.16" P2="560,274.75"/><JD c="000000,3,1,0" P1="196,298.16" P2="196,274.75"/><JD c="000000,3,1,0" P1="379,506.16" P2="379,482.75"/><JD c="000000,3,1,0" P1="561,295" P2="583,295"/><JD c="000000,3,1,0" P1="197,295" P2="219,295"/><JD c="000000,3,1,0" P1="379,503" P2="400,503"/><JD c="000000,3,1,0" P1="685,556" P2="685,534"/><JD c="000000,3,1,0" P1="633,428" P2="633,408"/><JD c="000000,3,1,0" P1="147,428" P2="147,408"/><JD c="000000,3,1,0" P1="95,556" P2="95,534"/><JD c="000000,3,1,0" P1="685,348" P2="685,300"/><JD c="000000,3,1,0" P1="95,348" P2="95,300"/><JD c="000000,3,1,0" P1="685,244" P2="685,199"/><JD c="000000,3,1,0" P1="95,244" P2="95,199"/><JD c="000000,3,1,0" P1="584,298.16" P2="584,274.75"/><JD c="000000,3,1,0" P1="220,298.16" P2="220,274.75"/><JD c="000000,3,1,0" P1="401,506.16" P2="401,482.75"/><JD c="000000,3,1,0" P1="687,532" P2="664,532"/><JD c="000000,3,1,0" P1="635,406" P2="612,406"/><JD c="000000,3,1,0" P1="143,406" P2="168,406"/><JD c="000000,3,1,0" P1="93,532" P2="116,532"/><JD c="000000,3,1,0" P1="687,300" P2="673,300"/><JD c="000000,3,1,0" P1="93,300" P2="107,300"/><JD c="000000,3,1,0" P1="687,199" P2="673,199"/><JD c="000000,3,1,0" P1="93,199" P2="107,199"/><JD c="000000,3,1,0" P1="695,193" P2="681,193"/><JD c="000000,3,1,0" P1="85,193" P2="99,193"/><JD c="000000,3,1,0" P1="687,558" P2="664,558"/><JD c="000000,3,1,0" P1="635,428" P2="612,428"/><JD c="000000,3,1,0" P1="145,428" P2="168,428"/><JD c="000000,3,1,0" P1="93,558" P2="116,558"/><JD c="000000,3,1,0" P1="687,350" P2="673,350"/><JD c="000000,3,1,0" P1="93,350" P2="107,350"/><JD c="1500fb,10,1,0" P1="91,189" P2="91,153"/><JD c="1500fb,10,1,0" P1="689,189" P2="689,153"/><JD c="000000,3,1,0" P1="687,245" P2="673,245"/><JD c="000000,3,1,0" P1="93,245" P2="107,245"/><JD c="000000,6,1,0" P1="91,189" P2="91,153"/><JD c="000000,6,1,0" P1="689,189" P2="689,153"/></L></Z></C>]]})
pacmice_maps[#pacmice_maps].pathes = {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}, {13, 1}, {14, 1}, {15, 1}, {16, 1}, {17, 1}, {18, 1}, {19, 1}, {20, 1}, {21, 1}, {22, 1}, {1, 2}, {5, 2}, {10, 2}, {13, 2}, {18, 2}, {22, 2}, {1, 3}, {2, 3}, {3, 3}, {4, 3}, {5, 3}, {6, 3}, {7, 3}, {8, 3}, {10, 3}, {13, 3}, {15, 3}, {16, 3}, {17, 3}, {18, 3}, {19, 3}, {20, 3}, {21, 3}, {22, 3}, {3, 4}, {8, 4}, {10, 4}, {13, 4}, {15, 4}, {20, 4}, {1, 5}, {2, 5}, {3, 5}, {4, 5}, {5, 5}, {6, 5}, {8, 5}, {10, 5}, {13, 5}, {15, 5}, {17, 5}, {18, 5}, {19, 5}, {20, 5}, {21, 5}, {22, 5}, {3, 6}, {6, 6}, {8, 6}, {9, 6}, {10, 6}, {13, 6}, {14, 6}, {15, 6}, {17, 6}, {20, 6}, {3, 7}, {6, 7}, {8, 7}, {15, 7}, {17, 7}, {20, 7}, {3, 8}, {6, 8}, {8, 8}, {15, 8}, {17, 8}, {20, 8}, {1, 9}, {2, 9}, {3, 9}, {6, 9}, {7, 9}, {8, 9}, {9, 9}, {10, 9}, {11, 9}, {12, 9}, {13, 9}, {14, 9}, {15, 9}, {16, 9}, {17, 9}, {20, 9}, {21, 9}, {22, 9}, {2, 10}, {7, 10}, {16, 10}, {21, 10}, {2, 11}, {3, 11}, {4, 11}, {5, 11}, {6, 11}, {7, 11}, {16, 11}, {17, 11}, {18, 11}, {19, 11}, {20, 11}, {21, 11}, {2, 12}, {7, 12}, {16, 12}, {21, 12}, {1, 13}, {2, 13}, {3, 13}, {4, 13}, {5, 13}, {7, 13}, {16, 13}, {18, 13}, {19, 13}, {20, 13}, {21, 13}, {22, 13}, {1, 14}, {5, 14}, {7, 14}, {16, 14}, {18, 14}, {22, 14}, {1, 15}, {5, 15}, {7, 15}, {8, 15}, {9, 15}, {10, 15}, {11, 15}, {12, 15}, {13, 15}, {14, 15}, {15, 15}, {16, 15}, {18, 15}, {22, 15}, {1, 16}, {3, 16}, {4, 16}, {5, 16}, {10, 16}, {13, 16}, {18, 16}, {19, 16}, {20, 16}, {22, 16}, {1, 17}, {3, 17}, {5, 17}, {6, 17}, {7, 17}, {8, 17}, {9, 17}, {10, 17}, {13, 17}, {14, 17}, {15, 17}, {16, 17}, {17, 17}, {18, 17}, {20, 17}, {22, 17}, {1, 18}, {2, 18}, {3, 18}, {5, 18}, {7, 18}, {16, 18}, {18, 18}, {20, 18}, {21, 18}, {22, 18}, {3, 19}, {5, 19}, {7, 19}, {8, 19}, {9, 19}, {10, 19}, {11, 19}, {12, 19}, {13, 19}, {14, 19}, {15, 19}, {16, 19}, {18, 19}, {20, 19}, {3, 20}, {5, 20}, {10, 20}, {13, 20}, {18, 20}, {20, 20}, {1, 21}, {2, 21}, {3, 21}, {4, 21}, {5, 21}, {6, 21}, {7, 21}, {8, 21}, {9, 21}, {10, 21}, {13, 21}, {14, 21}, {15, 21}, {16, 21}, {17, 21}, {18, 21}, {19, 21}, {20, 21}, {21, 21}, {22, 21}, {1, 22}, {6, 22}, {8, 22}, {10, 22}, {13, 22}, {15, 22}, {17, 22}, {22, 22}, {1, 23}, {3, 23}, {4, 23}, {5, 23}, {6, 23}, {8, 23}, {10, 23}, {13, 23}, {15, 23}, {17, 23}, {18, 23}, {19, 23}, {20, 23}, {22, 23}, {1, 24}, {3, 24}, {8, 24}, {10, 24}, {13, 24}, {15, 24}, {20, 24}, {22, 24}, {1, 25}, {2, 25}, {3, 25}, {4, 25}, {5, 25}, {6, 25}, {7, 25}, {8, 25}, {10, 25}, {11, 25}, {12, 25}, {13, 25}, {15, 25}, {16, 25}, {17, 25}, {18, 25}, {19, 25}, {20, 25}, {21, 25}, {22, 25}}


pacmice_map_colors = {"0000ff", "00ff00", "ff0000", "ffff00", "00ffff", "ff00ff", "ff7700", "d200ff"}
pacmice_map_color_index = math.random(#pacmice_map_colors)



--- Internal use:
pacmice_map = nil				-- current map
pacmice_cur_pilot = nil			-- for generating pathes
pacmice_cur_x = 0
pacmice_cur_y = 0
pacmice_cur_generating = false
pacmice_pacmans = {}			-- map of pacmouces (key is the player name)
pacmice_auto_respawn = true
pacmice_pacmouse_count = 0
pacmice_round_over = false



--- Alive mice count.
function pacmice_CountMiceAlive()
	local count = 0
	for player_name, player in pairs(tfm.get.room.playerList) do
		if not player.isDead and not pacmice_pacmans[player_name] then
			count = count + 1
		end
	end
	return count
end



--- Pop the best player's score.
function pacmice_PopBestScorePlayer()
	local best_player_name = nil
	for player_name in pairs(tfm.get.room.playerList) do
		if not best_player_name or pshy.scores[player_name] > pshy.scores[best_player_name] then
			best_player_name = player_name
		end
	end
	return best_player_name
end



--- TFM event eventNewGame()
-- Make the next pacmouse.
function eventNewGame()
	-- spawn scrolling
	tfm.exec.addPhysicObject(20, pacmice_map.web_x, 200, {type = tfm.enum.ground.water, width = 80, height = 4000, foreground = false, color = 0x1, miceCollision = false})
	tfm.exec.addPhysicObject(21, pacmice_map.web_x, pacmice_map.y + pacmice_map.grid_h * pacmice_map.cell_h, {type = tfm.enum.ground.rectangle, width = 200, height = 10, foreground = true, color = 0xff0000, miceCollision = true})
	tfm.exec.addPhysicObject(22, pacmice_map.web_x, 200, {type = tfm.enum.ground.rectangle, width = 200, height = 4000, foreground = true, color = 0x1, miceCollision = false})
	pacmice_round_over = false
	if pacmice_cur_generating then
		return
	end
	local pacmouse_player = pacmice_PopBestScorePlayer()
	pacmice_CreatePacman(pacmouse_player)
	if pacmice_map.pac_count == 1 or pacmice_CountMiceAlive() <= 1 then
		tfm.exec.chatMessage("<b><fc>The pacmouse is now " .. pshy.GetPlayerNick(pacmouse_player) .. "!</fc></b>", nil)
	else
		old_score = pshy.scores[pacmouse_player]
		pshy.scores[pacmouse_player] = 0
		local pacmouse_player_2 = pacmice_PopBestScorePlayer()
		pshy.scores[pacmouse_player] = old_score
		pacmice_CreatePacman(pacmouse_player_2)
		tfm.exec.chatMessage("<b><fc>The pacmice are now " .. pshy.GetPlayerNick(pacmouse_player) .. " and " .. pshy.GetPlayerNick(pacmouse_player_2) .. "!</fc></b>", nil)
	end
end



--- Create a pacman.
-- @player Player's Name#0000.
function pacmice_CreatePacman(player_name)
	if pacmice_pacmans[player_name] then
		error("should not come here")
		pacmice_DestroyPacman(player_name)
	end
	pacmice_pacmans[player_name] = {}
	local pacman = pacmice_pacmans[player_name]
	pacman.player_name = player_name
	pacman.cell_x = pacmice_map.pathes[#pacmice_map.pathes][1]
	pacman.cell_y = pacmice_map.pathes[#pacmice_map.pathes][2]
	pacman.cell_vx = -1
	pacman.cell_vy = 0
	pacman.wish_vx = -1
	pacman.wish_vy = 0
	pacman.image_id = nil
	pacman.direction = 0
	pacman.speed = 50
	pacman.size = 50
	pacman.image_animation_index = 0
	pacman.pacman_index = pacmice_pacmouse_count
	-- player
	tfm.exec.setShaman(player_name, false)
	tfm.exec.removeCheese(player_name)
	tfm.exec.respawnPlayer(player_name)
	tfm.exec.freezePlayer(player_name, true)
	tfm.exec.movePlayer(player_name, pacmice_map.web_x, pacman.cell_y * pacmice_map.cell_h + pacmice_map.y, false, 0, 0, false)
	--tfm.exec.changePlayerSize(player_name, (pacman.size - 4) / 35 )
	pacmice_pacmouse_count = pacmice_pacmouse_count + 1
	-- keys
	system.bindMouse(player_name, true)
	system.bindKeyboard(player_name, pshy.keycodes.UP, true, true)
	system.bindKeyboard(player_name, pshy.keycodes.DOWN, true, true)
	system.bindKeyboard(player_name, pshy.keycodes.LEFT, true, true)
	system.bindKeyboard(player_name, pshy.keycodes.RIGHT, true, true)
end



--- Destroy a pacman.
-- @player Player's Name#0000.
function pacmice_DestroyPacman(player_name)
	if pacmice_pacmans[player_name] then
		local pacman = pacmice_pacmans[player_name]
		if pacman.image_id then
			tfm.exec.removeImage(pacman.image_id)
		end
		pacmice_pacmans[player_name] = nil
		pacmice_pacmouse_count = pacmice_pacmouse_count - 1
		if not pacmice_round_over then
			tfm.exec.killPlayer(player_name)
		end
		tfm.get.room.playerList[player_name].isDead = true
	end
end



--- Draw a pacman.
-- @player Player's Name#0000.
function pacmice_DrawPacman(player_name)
	local pacman = pacmice_pacmans[player_name]
	local x = pacman.cell_x * pacmice_map.cell_w + pacmice_map.x
	local y = pacman.cell_y * pacmice_map.cell_h + pacmice_map.y
	-- next image
	pacman.image_animation_index = (pacman.image_animation_index + 1) % 2
	local image_code = ({"17ad578a939.png", "17ad578c0aa.png"})[pacman.image_animation_index + 1] -- jerry: 1718e698ac9.png -- pacman: 
	-- @todo
	old_image_id = pacman.image_id
	local size = (pacmice_map.cell_w * 2) - pacmice_map.wall_size
	--tfm.exec.addPhysicObject(5, x, y, {type = tfm.enum.ground.rectangle, width = size, height = size, foreground = false, color = 0xffff00, miceCollision = false})
	pacman.image_id = tfm.exec.addImage(image_code, "!0", x, y, nil, 1.0, 1.0, pacman.direction, 1.0, 0.5, 0.5)
	--pacman.image_id = tfm.exec.addImage("1718e698ac9.png", "$" .. player_name, 0, 0, nil, 0.5, 0.5, pacman.direction, 1.0, 0.5, 0.5)
	if old_image_id then
		tfm.exec.removeImage(old_image_id)
	end
	-- acid
	tfm.exec.addPhysicObject(pacman.pacman_index * 2 + 1, x, y, {type = tfm.enum.ground.acid, width = size, height = size, foreground = false, color = 0x0, miceCollision = true, groundCollision = false})
	tfm.exec.addPhysicObject(pacman.pacman_index * 2 + 2, x, y, {type = tfm.enum.ground.rectangle, width = size, height = size, foreground = false, color = 0x1, miceCollision = false, groundCollision = false})
	-- move the player
	tfm.exec.movePlayer(player_name, 0, 0, true, 0, (y - tfm.get.room.playerList[player_name].y) / 5 + 10 + pacman.cell_vy * 20, false)
end



--- Get a cell value.
function pacmice_GridGet(x, y)
	if x > pacmice_map.grid_w or y > pacmice_map.grid_h then
		return false
	end
	return pacmice_map.linear_grid[y * pacmice_map.grid_w + x]
end



--- Set a cell value.
function pacmice_GridSet(x, y, value)
	pacmice_map.linear_grid[y * pacmice_map.grid_w + x] = value
end



--- Redraw the cursor.
function pacmice_DrawCursor()
	local x = pacmice_cur_x * pacmice_map.cell_w + pacmice_map.x
	local y = pacmice_cur_y * pacmice_map.cell_h + pacmice_map.y
	if pacmice_cur_pilot then
		tfm.exec.addPhysicObject(23, x + pacmice_map.cell_w / 2, y, {type = tfm.enum.ground.rectangle, width = 5, height = 2000, foreground = false, color = 0xdd4400, miceCollision = false})
		tfm.exec.addPhysicObject(24, x - pacmice_map.cell_w / 2, y, {type = tfm.enum.ground.rectangle, width = 5, height = 2000, foreground = false, color = 0xdd4400, miceCollision = false})
		tfm.exec.addPhysicObject(25, x, y + pacmice_map.cell_h / 2, {type = tfm.enum.ground.rectangle, width = 2000, height = 5, foreground = false, color = 0xdd4400, miceCollision = false})
		tfm.exec.addPhysicObject(26, x, y - pacmice_map.cell_h / 2, {type = tfm.enum.ground.rectangle, width = 2000, height = 5, foreground = false, color = 0xdd4400, miceCollision = false})
	else
		tfm.exec.removeObject(23)
		tfm.exec.removeObject(24)
		tfm.exec.removeObject(25)
		tfm.exec.removeObject(26)
	end
end



--- Move the generation cursor, handling colisions.
function pacmice_MoveCursor(x, y)
	if not pacmice_cur_generating then
		-- map bounds
		if x < 0 or y < 0 or x >= pacmice_map.grid_w or y >= pacmice_map.grid_h then
			print("out of bounds")
			return
		end
		-- walls
		if not pacmice_GridGet(x, y) then
			return
		end
	end
	pacmice_cur_x = x
	pacmice_cur_y = y
	if pacmice_cur_generating then
		pacmice_GridSet(x, y, true)
	end
end



--- Get a vector from a direction key.
function pacmice_KeycodeToVector(keycode)
	if keycode == pshy.keycodes.UP then
		return 0, -1
	elseif keycode == pshy.keycodes.DOWN then
		return 0, 1
	elseif keycode == pshy.keycodes.LEFT then
		return -1, 0
	elseif keycode == pshy.keycodes.RIGHT then
		return 1, 0
	end
end



--- Get a direction from a vector.
function pacmice_VectorToDirection(x, y)
	if x == 1 and y == 0 then
		return 0
	elseif x == 0 and y == 1 then
		return (math.pi / 2) * 1
	elseif x == -1 and y == 0 then
		return (math.pi / 2) * 2
	elseif x == 0 and y == -1 then
		return (math.pi / 2) * 3
	end
	error("unexpected")
end



--- Get grid coordinates from a point on screen.
function pacmice_GetGridCoords(x, y)
	x = math.floor((x - pacmice_map.x) / pacmice_map.cell_w + 0.5)
	y = math.floor((y - pacmice_map.y) / pacmice_map.cell_h + 0.5)
	return x, y
end



--- Export the grid.
function pacmice_GridExportPathes(player_name)
	local total = "{"
	-- generate export string
	for y = 0, (pacmice_map.grid_h - 1) do
		for x = 0, (pacmice_map.grid_w - 1) do
			if pacmice_GridGet(x, y) then
				if #total > 1 then
					total = total .. ", "
				end
				total = total .. "{" .. tostring(x) .. ", " .. tostring(y) .. "}"
			end
		end
	end
	total = total .. "}"
	-- export
	while #total > 0 do
		subtotal = string.sub(total, 1, 180)
		tfm.exec.chatMessage(subtotal, player_name)
		total = string.sub(total, 181, #total)
	end
end



--- TFM event eventMouse.
function eventMouse(player_name, x, y)
	if player_name == pacmice_cur_pilot then
		x, y = pacmice_GetGridCoords(x, y)
		pacmice_MoveCursor(x, y)
		pacmice_DrawCursor()
		return true
	end
end



--- TFM event eventkeyboard.
function eventKeyboard(player_name, keycode, down, x, y)
	if player_name == pacmice_cur_pilot and (keycode == 0 or keycode == 1 or keycode == 2 or keycode == 3) then
		vx, vy = pacmice_KeycodeToVector(keycode)
		pacmice_MoveCursor(pacmice_cur_x + vx, pacmice_cur_y + vy)
		pacmice_DrawCursor()
	end
	local pacman = pacmice_pacmans[player_name]
	if pacman then
		pacman.wish_vx, pacman.wish_vy = pacmice_KeycodeToVector(keycode)
	end
end



--- TFM event eventLoop.
function eventLoop(time, time_remaining)
	-- skip this if generating
	if pacmice_cur_generating or pacmice_cur_pilot then
		return
	end
	-- next game
	if time_remaining <= 0 then
		pacmice_round_over = true
		local pacmans_names = {}
		for player_name, player in pairs(tfm.get.room.playerList) do
			if not player.isDead then
				tfm.exec.playerVictory(player_name)
				pshy.scores_Add(player_name, 10)
			end
		end
		for player_name in pairs(pacmice_pacmans) do
			pacmans_names[player_name] = true
		end
		for player_name in pairs(pacmans_names) do
			pacmice_DestroyPacman(player_name)
			pshy.scores_Set(player_name, 0)
		end
		pshy.RotationNext("pacmice")
	elseif pacmice_CountMiceAlive() <= 0 then
		tfm.exec.setGameTime(8, false)
	else
		local is_pacmouse = false
		for player_name in pairs(pacmice_pacmans) do
			is_pacmouse = true
		end
		if not is_pacmouse then
			tfm.exec.setGameTime(8, false)
		end
	end
end



--- pshy event eventLoopMore.
function eventLoopMore(time, time_remaining)
	for player_name, pacman in pairs(pacmice_pacmans) do
		--pacman.cell_x, pacman.cell_y = GetGridCoords(tfm.get.room.playerList[player_name].x, tfm.get.room.playerList[player_name].y)
		local wish_x = pacman.cell_x + pacman.wish_vx
		local wish_y = pacman.cell_y + pacman.wish_vy
		if pacmice_GridGet(wish_x, wish_y) then
			pacman.cell_vx = pacman.wish_vx
			pacman.cell_vy = pacman.wish_vy
		end
		if pacman.cell_vx ~= 0 or pacman.cell_vy ~= 0 then
			local seen_x = pacman.cell_x + pacman.cell_vx
			local seen_y = pacman.cell_y + pacman.cell_vy
			if pacmice_GridGet(seen_x, seen_y) then
				pacman.cell_x = seen_x
				pacman.cell_y = seen_y
				pacman.direction = pacmice_VectorToDirection(pacman.cell_vx, pacman.cell_vy)
			else		
				pacman.cell_vx = 0
				pacman.cell_vy = 0
			end
		end
--		pacman.cell_vx = pacman.wish_vx
--		pacman.cell_vy = pacman.wish_vy
--		pacman.direction = VectorToDirection(pacman.cell_vx, pacman.cell_vy)
--		tfm.exec.movePlayer(player_name, 0, 0, true, pacman.cell_vx * pacman.speed, pacman.cell_vy * pacman.speed, false)
		pacmice_DrawPacman(player_name)
	end
end



--- TFM event eventnewPlayer.
function eventNewPlayer(player_name)
	if auto_respawn and not pacmice_pacmans[player_name] then
		tfm.exec.respawnPlayer(player_name)
	end
end



--- TFM event eventPlayerWon
function eventPlayerWon(player_name)
	if not pacmice_pacmans[player_name] then
		pshy.scores_Add(player_name, 10)	
	end
end



--- TFM event eventPlayerDied.
function eventPlayerDied(player_name)
	if pacmice_pacmans[player_name] then
		pacmice_DestroyPacman(player_name)
	elseif auto_respawn then
		tfm.exec.respawnPlayer(player_name)
	else
		if not pacmice_round_over then
			pshy.scores_Add(player_name, 1)	
		end
	end
end



--- !pacmouse
function pacmice_ChatCommandPackmouse(user, target)
	target = target or user
	if target ~= user then
		if target ~= user and not pshy.HavePerm(user, "!pacmouse-others") then
			return false, "You cant use this command on others :c"
		end
		local reason
		target, reason = pshy.FindPlayerName(target)
		if not target then
			return false, reason
		end
	end
	if pacmice_pacmans[target] then
		pacmice_DestroyPacman(target)
	else
		if pacmice_pacmouse_count >= 2 then
			return false, "Too many pacmice :c"
		end
		pacmice_CreatePacman(target)
	end
end
pshy.chat_commands["pacmouse"] = {func = pacmice_ChatCommandPackmouse, desc = "turn into a pacmouse", argc_min = 0, argc_max = 1, arg_types = {"string"}, arg_names = {"Target#0000"}}
pshy.help_pages["pacmice"].commands["pacmouse"] = pshy.chat_commands["pacmouse"]
pshy.perms.admins["!pacmouse"] = true



--- !pacmicegenerate
function pacmice_ChatCommandPackmiceGenerate(user, target)
	target = target or user
	if target ~= user and not pshy.HavePerm(user, "!pacmouse-others") then
		return false, "You cant use this command on others :c"
	end
	if pacmice_cur_pilot ~= target or not pacmice_cur_generating then
		pacmice_cur_pilot = target
		pacmice_cur_generating = true
		system.bindMouse(target, true)
		system.bindKeyboard(target, pshy.keycodes.UP, true, true)
		system.bindKeyboard(target, pshy.keycodes.DOWN, true, true)
		system.bindKeyboard(target, pshy.keycodes.LEFT, true, true)
		system.bindKeyboard(target, pshy.keycodes.RIGHT, true, true)
		tfm.exec.freezePlayer(target, true)
		tfm.exec.chatMessage("Generating!", user)
	else
		pacmice_cur_generating = false
		pacmice_GridExportPathes(target)
		tfm.exec.freezePlayer(target, false)
		tfm.exec.chatMessage("No longer generating.", user)
	end
end
pshy.chat_commands["generatepathes"] = {func = pacmice_ChatCommandPackmiceGenerate, desc = "generate the new map's pathes (see source)", argc_min = 0, argc_max = 1, arg_types = {"player"}, arg_names = {"Target#0000"}}
pshy.help_pages["pacmice"].commands["generatepathes"] = pshy.chat_commands["generatepathes"]
pshy.perms.admins["!generatepathes"] = true



--- Replace #ff0000 by the winner team color
function pshy.pacmice_GetMap(i_map)
	pacmice_map = pacmice_maps[i_map]
	pacmice_map_color_index = (pacmice_map_color_index % #pacmice_map_colors) + 1
	if #pacmice_map.pathes == 1 then
		pacmice_cur_generating = true
		pacmice_map.grid_w = 100
		pacmice_map.grid_h = 100
	end
	return string.gsub(pacmice_map.xml, "1500fb", pacmice_map_colors[pacmice_map_color_index])
end



--- Initialization:
-- generate other map properties
for i_map, map in ipairs(pacmice_maps) do
	pacmice_map = map
	map.linear_grid = {}
	local max_grid_x, max_grid_y = 1, 1
	for i_path, path in ipairs(map.pathes) do
		max_grid_x = math.max(max_grid_x, path[1])
		max_grid_y = math.max(max_grid_y, path[2])
	end
	map.grid_w = max_grid_x + 1
	map.grid_h = max_grid_y + 1
	for i_path, path in ipairs(map.pathes) do
		pacmice_GridSet(path[1], path[2], true)
	end
end
pacmice_map = nil
-- create the rotiation
pshy.rotations["pacmice"] = {hidden = true, desc = "pacmice", duration = 120, weight = 0, maps = {}, map_replace_func = pshy.pacmice_GetMap, chance = 0}
for i_map in ipairs(pacmice_maps) do
	table.insert(pshy.rotations["pacmice"].maps, i_map)
end
-- start
pshy.RotationNext("pacmice")
