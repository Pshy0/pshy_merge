local room = tfm.get.room
local table_concat = table.concat
local newGame = tfm.exec.newGame
local area = ui.addTextArea
local rarea = ui.removeTextArea
local uparea = ui.updateTextArea
local _, msg = pcall(nil)
room.loader = string.match(msg, "^(.-)%.")
local admin = {room.loader}
local Pwin = 10
local AutoJoin = true
local NoGuest = true
local GameStarted = false
local Modes = {
	Racing = {
		rotation = {'#17'},
		rotationused = {},
		antileve = {6641062, 6641147, 6641130, 6641108, 6641063, 6640755, 6641141, 6641097, 6641144, 6641111, 6641110, 6641087, 6641075, 6641132, 6641101, 6641090, 6641077, 6641069, 6641067, 6641064, 6641058, 6640884, 6640869, 6640866, 6640860, 6640859, 6640858, 6640854, 6640852, 6640846, 6640833, 6640816, 6640808, 6640737, 6641109, 6641096}, 
		troll = {5862892, 5859579, 6190773, 5982510, 6190270, 5858784, 5902850, 7326707, 7783458, 6689054, 7797209, 5202605, 7308732, 6299421, 7797213, 5859594, 6299376, 5859607, 6901245, 7724956},
		time = 63	
	},
	Bootcamp = {
		rotation = {182681, 261814, 1893451, 424604, 1018394, 1788490, 2252731, 1595965, 232678, 729863, 801683, 2692883, 4445580, 2176211, 392240, 6986340, 2208924, 184868, 3043779, 173816, 174223, 152260, 505619, 497965, 239698, 408577, 543010, 1678634, 156720, 564198, 176729, 178297, 549759, 149451, 161023, 393486, 446982, 544695, 285589, 431873, 521120, 342200, 543042, 1636814, 5081568, 313138, 2466489, 233971, 298424, 253469, 330827, 2693344, 419198, 344010, 6951597, 374779, 176615, 358014, 292808, 394125, 532860, 6697786, 537708, 252142, 324601, 242351, 263730, 175454, 237188, 3089270, 235717, 250664, 197368, 6995044, 277631, 619517, 562897, 4237910, 2082776, 1531604, 160841, 2130169, 149422, 970919, 1333846, 412467, 1540221, 201000, 6593495, 449496, 208940, 412913, 320626, 3493490, 496886, 167075, 3828508, 506032, 5092739, 208373, 3937567, 250153, 155606, 155628, 571683, 168204, 159145, 1646448, 159298, 176619, 523270, 191205, 458528, 399364, 177652, 171480, 124000, 319443, 168754, 173623, 170007, 453635, 536905, 541247, 1390405, 205506, 357837, 842019, 361500, 1414443, 301559, 159116, 305680, 191642, 192158, 506940, 329200, 157960, 183139, 332297, 1951944, 374321, 179807, 2817711, 3527399, 497359, 1580356, 153996, 3068717, 223947, 176614, 366055, 596239, 170483, 167903, 912356, 270650, 425774, 1014313, 158345, 235037, 183141, 374995, 364135, 197229, 215933, 322922, 551317, 6137767, 2999994, 192560, 1398609, 346684, 836190, 249760, 404881},
		--rotation = {'#3', '#13'}, --official rotation
		rotationused = {},
		antileve = {'<C><P /><Z><S><S P="0,0,.2,,,0,0,0" L="10" X="230" H="150" Y="230" T="1" /><S P="0,0,.3,.2,,0,0,0" L="10" X="240" H="150" Y="230" T="0" /><S P="0,0,.3,.2,,0,0,0" L="450" X="225" H="10" Y="155" T="0" /><S P="0,0,.3,.2,,0,0,0" X="3" L="10" H="400" c="4" Y="200" T="0" /><S P="0,0,.3,.2,-180,0,0,0" L="10" X="797" H="103" Y="150" T="0" /><S P="0,0,.2,,,0,0,0" L="10" X="54" H="10" Y="390" T="1" /><S P="0,0,.3,.2,,0,0,0" X="44" L="10" H="200" c="4" Y="300" T="0" /><S P="0,0,.3,.2,,0,0,0" L="812" X="400" H="10" Y="3" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" X="796" H="10" Y="330" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" X="796" H="10" Y="300" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" X="796" H="10" Y="270" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" X="796" H="10" Y="360" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" X="796" H="10" Y="240" T="0" /><S P="0,0,.2,,,0,0,0" L="10" X="797" H="200" Y="300" T="1" /><S P="0,0,.2,,,0,0,0" L="125" X="740" H="10" Y="400" T="0" /><S P="0,0,.3,.7,-45,0,0,0" L="10" X="668" H="10" Y="286" T="2" /><S P="0,0,0,.2,10,0,0,0" L="150" X="400" H="10" Y="225" T="1" /><S P="0,0,.2,,,0,0,0" L="20" X="235" H="10" Y="300" T="1" /><S P="0,0,.3,1.2,,0,0,0" L="10" X="652" H="65" Y="50" T="2" /><S P="0,0,.2,,,0,0,0" L="14" X="5" H="165" Y="78" T="1" /><S P="0,0,0,.2,-5,0,0,0" L="275" X="540" H="10" Y="300" T="1" /><S P="0,0,20,.2,-180,0,0,0" L="20" X="660" H="25" Y="90" T="4" /><S P="0,0,.3,.2,,0,0,0" L="10" X="125" H="70" Y="50" T="0" /><S P="0,0,.3,.2,,0,0,0" L="30" X="295" H="30" Y="60" T="0" /><S P="0,0,.3,.2,,0,0,0" L="30" X="280" H="30" Y="90" T="0" /><S P="0,0,.2,,,0,0,0" L="20" X="660" H="60" Y="50" T="1" /><S P="0,0,.2,90,,0,0,0" L="20" X="280" H="20" Y="90" T="1" /><S P="0,0,.2,-45,,0,0,0" L="20" X="280" H="20" Y="90" T="1" /><S P="0,0,.2,-90,,0,0,0" L="20" X="295" H="20" Y="60" T="1" /><S P="0,0,.3,.2,,0,0,0" L="10" X="315" H="65" Y="43" T="0" /><S P="0,0,.2,45,,0,0,0" L="20" X="295" H="20" Y="60" T="1" /><S P="0,0,.2,-180,,0,0,0" L="10" X="797" H="100" Y="50" T="1" /><S P="0,0,.2,,,0,0,0" L="410" H="10" X="200" Y="400" T="1" /><S P="0,0,0.01,,-1.2,0,0,0" L="10" o="" X="44" H="195" Y="297" T="12" /><S P="0,0,0.01,,1.2,0,0,0" L="10" o="" X="4" H="230" Y="280" T="12" /></S><D><DS Y="375" X="25" /><F Y="385" X="755" /><T Y="54" X="35" /></D><O /></Z></C>',
					'<C><P /><Z><S><S P="0,0,.3,.2,,0,0,0" L="60" X="30" H="10" Y="395" T="0" /><S P="0,0,.2,,,0,0,0" L="10" X="699" H="300" Y="190" T="1" /><S P="0,0,,.2,-180,0,0,0" L="10" X="189" H="240" Y="169" T="1" /><S P="0,0,,.2,90,0,0,0" L="300" X="50" H="10" Y="188" T="1" /><S P="0,0,20,.2,,0,0,0" L="10" X="194" H="25" Y="245" T="4" /><S P="0,0,.3,.2,,0,0,0" L="40" X="776" H="10" Y="162" T="0" /><S P="0,0,.3,.2,,0,0,0" X="118" L="50" H="275" c="4" Y="265" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" X="496" H="58" Y="94" T="0" /><S P="0,0,20,.2,,0,0,0" L="10" X="189" H="15" Y="297" T="4" /><S P="0,0,.3,.2,,0,0,0" L="10" X="300" H="75" Y="80" T="0" /><S P="0,0,.2,,,0,0,0" L="10" X="430" H="260" Y="270" T="1" /><S P="0,0,.2,,,0,0,0" L="10" X="500" H="270" Y="174" T="1" /><S P="0,0,.2,,,0,0,0" L="10" X="609" H="255" Y="273" T="1" /><S P="0,0,0,.2,-45,0,0,0" L="10" X="194" H="10" Y="200" T="1" /><S P="0,0,,.2,45,0,0,0" L="10" X="194" H="10" Y="160" T="1" /><S P="0,0,20,.2,,0,0,0" L="10" X="300" H="10" Y="122" T="4" /><S P="0,0,10,,,0,0,0" L="35" X="476" H="10" Y="58" T="3" /><S P="0,0,.2,,,0,0,0" L="90" X="520" H="10" Y="395" T="1" /><S P="0,0,20,.2,,0,0,0" L="10" X="510" H="10" Y="303" T="4" /><S P="0,0,.2,,,0,0,0" L="10" X="455" H="15" Y="56" T="1" /><S P="0,0,.3,.2,,0,0,0" L="10" X="599" H="120" Y="206" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" X="589" H="90" Y="191" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" X="579" H="60" Y="176" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" X="569" H="30" Y="162" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" X="709" H="300" Y="190" T="0" /><S P="0,0,20,.2,,0,0,0" L="20" X="704" H="10" Y="345" T="4" /><S P="0,0,.3,.2,,0,0,0" H="500" L="10" o="6a7495" X="387" c="3" Y="-200" T="12" /><S P="0,0,.2,,,0,0,0" L="30" X="118" H="255" Y="265" T="1" /><S P="0,0,.3,.2,,0,0,0" L="18" X="118" H="245" Y="265" T="0" /><S P="0,0,,.2,90,0,0,0" L="10" X="385" H="680" Y="48" T="1" /><S P="0,0,0.01,0,-1.2,0,0,0" L="10" o="" X="96" H="270" Y="264" T="12" /></S><D><F Y="380" X="30" /><DS Y="370" X="30" /><T Y="156" X="775" /></D><O /></Z></C>',
					'<C><P /><Z><S><S P="0,0,,.2,45,0,0,0" L="40" H="50" X="169" Y="342" T="1" /><S P="0,0,.3,.2,,0,0,0" L="200" H="100" X="101" Y="431" T="0" /><S P="0,0,.3,.2,,0,0,0" H="35" L="70" X="165" c="4" Y="363" T="0" /><S P="0,0,.3,.2,,0,0,0" H="130" L="35" X="147" c="4" Y="282" T="0" /><S P="0,0,.3,.2,-90,0,0,0" L="35" H="78" X="126" Y="233" T="0" /><S P="0,0,.2,,,0,0,0" L="112" H="105" X="494" Y="445" T="1" /><S P="0,0,0,1,50,0,0,0" L="48" H="47" X="789" Y="406" T="2" /><S P="0,0,20,.2,-35,0,0,0" L="10" H="59" X="548" Y="246" T="4" /><S P="0,0,.2,,,0,0,0" L="61" H="10" X="558" Y="224" T="1" /><S P="0,0,.3,.2,,0,0,0" L="20" H="100" X="773" Y="162" T="0" /><S P="0,0,,.2,-30,0,0,0" L="10" H="44" X="605" Y="101" T="1" /><S P="0,0,.3,.2,,0,0,0" L="10" H="80" X="446" Y="58" T="0" /><S P="0,0,.3,.2,,0,0,0" L="800" H="10" X="399" Y="5" T="0" /><S P="0,0,.2,,,0,0,0" L="50" H="70" X="815" Y="404" T="1" /><S P="0,0,.2,,,0,0,0" L="50" H="70" X="815" Y="403" T="1" /><S P="0,0,.3,.2,,0,0,0" L="10" H="30" X="279" Y="30" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" H="30" X="310" Y="30" T="0" /><S P="0,0,.3,.2,,0,0,0" L="20" H="50" X="294" Y="41" T="0" /><S P="0,0,20,.2,,0,0,0" L="10" H="10" X="294" Y="71" T="4" /><S P="0,0,20,.2,,0,0,0" L="10" H="10" X="279" Y="51" T="4" /><S P="0,0,20,.2,,0,0,0" L="10" H="10" X="310" Y="50" T="4" /><S P="0,0,,.2,-40,0,0,0" L="10" H="10" X="130" Y="75" T="1" /><S P="0,0,20,.2,,0,0,0" L="10" H="10" X="49" Y="44" T="4" /><S P="0,0,20,.2,,0,0,0" L="10" H="10" X="34" Y="25" T="4" /><S P="0,0,20,.2,,0,0,0" L="10" H="10" X="49" Y="25" T="4" /><S P="0,0,20,.2,,0,0,0" L="10" H="10" X="34" Y="44" T="4" /><S P="0,0,0.01,0,-1.2,0,0,0" L="10" o="" X="134" H="130" Y="316" T="12" /></S><D><T Y="382" X="32" /><F Y="42" X="8" /></D><O /></Z></C>',
					'<C><P Ca="" /><Z><S><S P="0,0,,.2,,0,0,0" L="10" H="10" X="161" Y="380" T="1" /><S P="0,0,.3,.2,-90,0,0,0" L="10" X="161" H="10" Y="201" T="10" /><S P="0,0,.4,,,0,0,0" L="10" H="251" X="152" Y="312" T="1" /><S P="0,0,.3,.2,,0,0,0" L="41" H="10" X="122" Y="127" T="10" /><S P="0,0,.6,.2,-90,0,0,0" L="40" H="20" X="677" Y="279" T="10" /><S P="0,0,.3,.2,,0,0,0" L="80" H="32" X="40" Y="405" T="10" /><S P="0,0,.3,.2,,0,0,0" L="41" H="10" X="124" Y="293" T="10" /><S P="0,0,.3,.2,90,0,0,0" L="80" H="18" X="156" Y="281" T="10" /><S P="0,0,.3,.2,,0,0,0" L="200" X="738" H="18" Y="250" T="10" /><S P="0,0,.3,.2,,0,0,0" L="33" X="747" H="10" Y="115" T="10" /><S P="0,0,.6,.2,,0,0,0" L="40" H="18" X="668" Y="268" T="10" /><S P="0,0,.3,.2,,0,0,0" L="41" X="123" H="10" Y="209" T="10" /><S P="0,0,.4,.2,180,0,0,0" L="10" X="684" H="70" Y="294" T="10" /><S P="0,0,.3,.2,-90,0,0,0" c="4" L="240" X="141" H="12" Y="242" T="10" /><S P="0,0,.2,,,0,0,0" L="90" H="20" X="535" Y="394" T="1" /><S P="0,0,.2,,,0,0,0" L="50" X="182" H="21" Y="393" T="1" /><S P="0,0,.6,.2,,0,0,0" L="41" H="10" X="706" Y="86" T="10" /><S P="0,0,.3,.2,90,0,0,0" L="10" X="604" H="10" Y="86" T="10" /><S P="0,0,.3,,-90,0,0,0" L="320" H="160" X="831" Y="401" T="10" /><S P="0,0,.3,,-90,0,0,0" L="320" X="843" H="160" Y="81" T="10" /><S P="0,0,.3,,-180,0,0,0" L="1200" H="160" X="163" Y="-49" T="10" /><S P="0,0,.3,.2,,0,0,0" L="40" X="182" H="22" Y="398" T="10" /><S P="0,0,.3,.2,,0,0,0" L="80" H="22" X="535" Y="399" T="10" /><S P="0,0,0.01,0,-1.2,0,0,0" L="10" o="" X="139" H="240" Y="241" T="12" /></S><D><F Y="76" X="706" /><T Y="389" X="40" /><DS Y="374" X="40" /><DC Y="99" X="748" /></D><O /></Z></C>',
					'<C><P /><Z><S><S P="0,0,.3,.2,,0,0,0" L="150" H="40" X="77" Y="383" T="0" /><S P="0,0,.3,.2,,0,0,0" c="4" L="40" H="150" X="171" Y="326" T="0" /><S P="0,0,.3,.2,,0,0,0" L="150" H="40" X="192" Y="230" T="0" /><S P="0,0,.3,.2,,0,0,0" L="150" H="40" X="150" Y="190" T="0" /><S P="0,0,.3,.2,,0,0,0" L="40" H="150" X="607" Y="326" T="0" /><S P="0,0,.3,.2,,0,0,0" L="40" H="150" X="779" Y="189" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" H="100" X="668" Y="92" T="0" /><S P="0,0,.3,.2,,0,0,0" L="15" H="50" X="576" Y="69" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" H="100" X="385" Y="92" T="0" /><S P="0,0,.3,.2,,0,0,0" L="800" H="40" X="400" Y="23" T="0" /><S P="0,0,0.01,0,-1.2,0,0,0" L="10" o="" X="155" H="110" Y="307" T="12" /></S><D><T Y="113" X="779" /><DS Y="345" X="31" /><F Y="67" X="352" /></D><O /></Z></C>', 
					'<C><P /><Z><S><S P="0,0,.3,.2,,0,0,0" c="4" L="10" H="314" X="6" Y="245" T="0" /><S P="0,0,.3,.2,,0,0,0" L="124" H="10" X="61" Y="89" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" H="54" X="78" Y="121" T="0" /><S P="0,0,20,.2,,0,0,0" L="10" H="10" X="124" Y="89" T="4" /><S P="0,0,.3,.2,,0,0,0" L="181" H="10" X="91" Y="398" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" H="300" X="657" Y="296" T="0" /><S P="0,0,.3,.2,,0,0,0" L="58" H="10" X="457" Y="400" T="0" /><S P="0,0,.3,.2,,0,0,0" L="145" H="10" X="697" Y="146" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" H="42" X="746" Y="172" T="0" /><S P="0,0,20,.2,,0,0,0" L="10" H="10" X="746" Y="195" T="4" /><S P="0,0,.3,.2,,0,0,0" L="44" H="10" X="674" Y="401" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" H="10" X="667" Y="337" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" H="10" X="667" Y="282" T="0" /><S P="0,0,.3,.2,,0,0,0" L="10" H="10" X="667" Y="226" T="0" /><S P="0,0,.3,.2,,0,0,0" L="25" H="10" X="639" Y="226" T="0" /><S P="0,0,.3,.2,,0,0,0" L="25" H="10" X="639" Y="337" T="0" /><S P="0,0,.3,.2,,0,0,0" L="25" H="10" X="639" Y="282" T="0" /><S P="0,0,20,.2,,0,0,0" L="10" X="78" H="10" Y="151" T="4" /><S P="0,0,0.01,0,1.2,0,0,0" L="10" o="" X="8" H="300" Y="244" T="12" /></S><D><DS Y="375" X="157" /><F Y="392" X="676" /><T Y="83" X="28" /></D><O /></Z></C>'},
		time = 93
	},
	Vanilla = {
		rotation = {2, 11, 12, 19, 22, 40, 44, 45, 55, 57, 67, 69, 71, 73, 74, 79, 80, 86, 123, 127, 138, 142, 145, 150, 172, 173, 174, 189, 7833293, 7833292, 7833291, 7833290, 7833289, 7833288, 7833271, 7833272, 7833260, 7833265, 7830960, 7833268, 7833269, 7833270, 7831136, 7831065, 7833169, 7833263, 7833266, 7833279, 7833281, 7833282, 7833259, 7815665, 7815151, 7815374, 7833287, 7838835, 7838838, 7838930, 7838967, 7838914, 7838910, 7839014, 7839038, 7839046, 7839806, 7839461, 7839368, 7839507, 7839493, 7839374, 7839942, 7840463, 7840122, 7840110, 7839819, 7840207, 7840167, 7840646, 7840728, 7840186, 7840366, 7840379, 7840176, 7840159, 7840392, 7840404, 7840564, 7840635, 7839352, 7840902, 7841488, 7844856, 7844642, 7844643, 7844648, 7844650, 7844660, 7844661, 7844664, 7844984, 2111371, 7848597, 7848605, 7848626, 7848738, 7848782, 7844645, 7863947, 7863949, 7863950, 7863951, 7863952, 7863953, 7863955, 7863958, 7863961, 763961, 6714567},
		rotationused = {},
		antileve = {7794534, 7762520, 7835814, 7835821, 7835822, 7835825, 7835826, 7838841, 7857909},
		troll = {5018771, 5719514, 6125960, 6127589, 6192402, 7317620, 5018836, 5564186, 6217094, 5019223, 6501480, 6232081, 6232089, 6232095, 6217055, 6108198, 6623156, 5049526, 7111346, 6299153, 6526760, 6473951, 5595910, 5858644, 5621219, 5910108, 6189594, 6313270, 5436707, 5649499, 6125319, 6299508, 6205714, 5910077, 6451557, 6798232, 6794500, 6104360, 4888705, 6207848, 6313538, 7324375, 6313624, 6697735},
		time = 63
	},
	Burlas = {
		rotation = {7853165, 7853166, 7853168, 7853174, 7853199, 7853204, 7853207, 7853219, 7853224, 7853226, 7853228, 7853231, 7853232, 7853234, 7853238, 7853245, 7853279, 7853504, 7853508, 7853510, 7853734, 7853740, 7853742, 7853743, 7853750, 7853751, 7853754, 7853757, 7853762, 7853765, 7853767, 7853770, 7853773, 7853775, 7853777, 7853778, 7853781, 7853783, 7853816, 7853819, 7853822, 7853823, 7853825, 7853826, 7853827, 7853828, 7853830, 7853832, 7853834, 7853835, 7853836, 7853837, 7853838, 7853841, 7853842, 7853893, 7853895, 7853898, 7853215, 7652017, 7652019, 7652033, 7652664, 7652667, 7652670, 7652679, 7652691, 7652790, 7652791, 7652792, 7652793, 7652796, 7652797, 7652798, 7652944, 7652958, 7652960, 7653108, 7653124, 7653127, 7653139, 7653142, 7653144, 7653149, 7426198, 7426611, 7387658, 7654229, 7203871, 7175013, 7165042, 7154662, 6889690, 6933442, 7002430, 6884221, 6886514, 6882315, 6927305, 7659197, 7659205, 7659208, 7660110, 7660117, 7660104, 7660502, 7660704, 7660705, 7660706, 7660709, 7660710, 7660714, 7660716, 7660718, 7660721, 7660723, 7660727, 7661057, 7661060, 7661062, 7661067, 7661072, 7662547, 7662559, 7662562, 7662565, 7662566, 7662569, 7662768, 7662777, 7662780, 7662796, 7663423, 7663428, 7663430, 7663435, 7663438, 7663444, 7663445, 7801474, 7801470, 7801467, 7801466, 7801465, 7801462, 7801461, 7801459, 7801452, 7801451, 7801449, 7801448, 7801447, 7801482, 7801478, 7801480, 7801476, 7801445, 7801444, 7801442, 7801441, 7801440, 7801439, 7801437, 7801436, 7801435, 7801433, 7801430, 7801429, 7801427, 7801426, 7801425, 7801424, 7801423, 7801420, 7801419, 7801416, 7801399, 7801395, 7801394, 7801387, 7801847, 7801852, 7802248, 7802254, 7802255, 7802256, 7802257, 7802259, 7802260, 7802261, 7802262, 7802264, 7802265, 7802266, 7802267, 7802268, 7802269, 7846971, 7846975, 7846969, 7846694, 7846981, 7846690, 7846987, 7846994, 7847192, 7847194, 7847199, 7847398, 7847401, 7847403, 7847405, 7847407, 7847408, 7847410, 7847415, 7847416, 7847419, 7591097, 7600223, 7602527, 7597500, 7673438, 7615327, 7590745, 7677688, 7696084, 7592953, 7708136, 7591956, 7678883, 7594139, 7678878, 7678879},
		rotationused = {},
		antileve = {7840769, 7840770, 7840772, 7840773, 7840774, 7840775, 7840777, 7840782, 7840784, 7840786},
		time = 93
	},
	Normal = {
		rotation = {4856787, 3693603, 1695961, 573162, 1602006, 5225660, 3904844, 4130519, 2847085, 432838, 3367472, 1661557, 5578142, 3848961, 556991, 5470076, 1934684, 7423396, 3827073, 2216672, 5925390, 2422320, 6011897, 1684971, 5874848, 2904364, 1826106, 1299778, 3889066, 1651396, 2474610, 2954389, 2912090, 1557183, 1937029, 2507487, 1715294, 2922372, 5463645, 1681132, 4780988, 913716, 3545388, 2932771, 5413653, 1845425, 7295773, 7094153, 2493682, 2990927, 2887564, 2677697, 408672, 5316507, 3703101, 3632558, 1308009, 4770812, 5337079, 3755004, 1415101, 5745185, 982968, 3660773, 3121001, 247806, 2271606, 3931104, 3725831, 3205507, 5505571, 2668317, 2885795, 7051723, 3732788, 6507006, 3412978, 4119570, 3678477, 1576605, 7175099, 1305918, 2924041, 530050, 1671341, 6538336, 2590428, 3111412, 3444188, 2745018, 4100202, 2604892, 3778127, 2930905, 5229169, 7201798, 1766070, 1934713, 3600756, 2213804, 2767444, 2422252, 2581588, 2008408, 3225517, 1583004, 806374, 4743209, 2206428, 1337908, 3639063, 5819000, 3696099, 2222914, 2000227, 7422917, 1883283, 1686313, 5521222, 3089084, 2442179, 1759304, 1747395, 2553999, 6982855, 3685130, 6751808, 6099941, 4934225, 1516378, 5805504, 675584, 470956, 2510902, 1242503, 3749719, 2487185, 4129854, 3526684, 5851713, 1567499, 485685, 5331758, 3063021, 5086885, 1334799, 2673350, 2094529, 816937, 1984183, 3660915, 5067745, 1836636, 2570299, 4974043, 2958926, 1617612, 1664206, 2324943, 1207415, 7546911, 2818215, 3974286, 7165647, 3671337, 2801423, 2510424, 1388511, 624595, 1297286, 2436358, 6091196, 5512914, 487571, 2815852, 6458416, 3804033, 4933567, 5744422, 5722902, 5470939, 5452179, 5457991, 1640994, 2873717, 1524883, 1845772, 3674891, 1875155, 2464178, 1739033, 3724024, 1791754, 4159572, 967165, 2701754, 5567026, 2472185, 5552462, 249043, 3084699, 2785576, 379257, 1860558, 4848841, 3177975, 2873752, 2529630, 2521006, 400020, 7543202, 7534845, 3699951, 5905174, 1989575, 451053, 2184388, 1392529, 4851652, 3721264, 2702019, 336108, 1338400, 7463026, 1821872, 3678098, 1974435, 6474880, 3134012, 2177055, 1458500, 3305645, 856005, 1595486, 1612392, 2460705, 6267145, 1580571, 1538872, 5824666, 3872292, 2604202, 1970794, 1794494, 3913043, 522169, 2889144, 1682581, 3570595, 2952667, 3531094, 972593, 2828325, 3718893, 625620, 1826923, 3777243, 2071143, 3175833, 2822802, 6450734, 3075720, 1552345, 400875, 3695422, 3617908, 4999095, 868500, 3273027, 1830647, 3001168, 839357, 143026, 6509298, 6216983, 2866493, 1699319, 6043877, 2777244, 3790887, 1597535, 5366786, 1943658, 4644327, 2573869, 5497221, 6166360, 3757587, 1601279, 3656856, 1880412, 5548982, 440803, 3486898, 1469614, 1691653, 3517982, 1971388, 1591567, 2016029, 1915474, 1257990, 2836295, 3495373, 1595131, 2712714, 2038888, 2112482, 5898371, 2152725, 1794645, 1766575, 3413233, 1394393, 2752920, 5826810, 1800219, 3236194, 5880743, 3888975, 3239977, 1672342, 1289969, 2634502, 1994578, 3974343, 3862812, 1959522, 2695007, 1975949, 5539548, 3817687, 1969538, 526457, 3648898, 2497733, 3919737, 3230126, 3112996, 1649655, 1414281, 1419212, 1209447, 4702472, 1578727, 4670311, 6569858, 1900395, 5593658, 748627, 3220216, 3036369, 1533891, 6104868, 5208730, 3220691, 2113571, 5692470, 1545496, 6832768, 3411897, 5039866, 3220150, 5040626, 1580625, 3783670, 5086760, 2954390, 4649501, 5605098, 4316966, 3814007, 1893227, 1662866, 3720504, 3267052, 5534969, 5493628, 2189066, 4933333, 5000031, 2414326, 1660312, 877064, 3650461, 7532482, 3694198, 2852186, 1170709, 2872105, 1682394, 1202364, 2153009, 4366270, 1824797, 927167, 5556574, 2818776, 2749154, 5307145, 4186227, 5721017, 2514839, 5895587, 903753, 5642148, 3886007, 7577632, 7577633, 7577635, 7577636, 904700, 7577637, 7577638, 7577641, 7577645, 7577648, 7577649, 7577650, 7577654, 455254, 7577656, 7577659, 7577661, 7577662, 7577663, 2951831, 3133284, 2888737, 7316490, 2923902, 3817089, 3743709, 5784317, 2196639, 3491472, 2932823, 3556939, 4721537, 5557000, 3707957, 4449825, 4335108, 1650317, 4940330, 1197771, 2515859, 924199, 5342184, 3178756, 6461474, 3961089, 4028439, 3820443, 2753029, 3902921, 1636847, 5146101, 1352371, 6149586, 2280915, 1566790, 2461560, 1811706, 1663869, 6593705, 6712790, 1961069, 3510802, 3674914, 2185637, 1714183, 5772036, 2011425, 5719032, 3703405, 5208010, 1677751, 1390504, 5058856, 3153335, 3603807, 41413, 2439981, 2152273, 2837758, 2846092, 5850864, 3507172, 287241, 3741419, 692902, 5316041, 5301410, 3682607, 1753932, 3091367, 788325, 1449159, 3366992, 916292, 6347261, 1434657, 6102366, 1255406, 1076556, 2798150, 5683203, 6837500, 1962691, 5198233, 599132, 567368, 3950087, 4074777, 6419244, 2916236, 4800287, 3757673, 293239, 6536106, 809165, 3415097, 854987, 1990729, 1476644, 3197548, 3732761, 2670433, 2863240, 3744754, 3042024, 1414583, 1405201, 3900432, 5568878, 1344308, 1827745, 3192935, 1904605, 480826, 1254895, 3641472, 4882220, 1634079, 3172505, 2256215, 1394768, 786326, 6158708, 3352107, 5391121, 5067010, 2468375, 3201256, 3724600, 6286341, 3549181, 7186722, 339068, 1979304, 5435620, 6028061, 2708731, 5178280, 1201818, 5699567, 3397714, 2247468, 2719292, 2179111, 2232637, 2368305, 1411884, 1623902, 3824123, 5641251, 3737863, 1900927, 3026180, 6873059, 3324192, 4289072, 3233197, 2023564, 3691680, 2277265, 1757932, 2676236, 6428562, 5881430, 7576691, 7576693, 7576695, 2794461, 7576709, 1395712, 5530715, 7576703, 5444350, 2207345, 2842087, 3572040, 2162120, 2440783, 5130206, 2370767, 4558726, 4060762, 3628872, 3532285, 4675569, 2835676, 1528880, 1383825, 7272444, 1961891, 3079549, 2501462, 1986742, 7545766, 5400102, 7070700, 7100013, 3521381, 5504146, 1976484, 2609729, 957128, 997153, 5727892, 2380804, 1310682, 2807482, 3101639, 3044133, 608631, 2563142, 1156897, 3490631, 3662992, 5452668, 4217430, 2251303, 3057877, 1646186, 5327503, 6191961, 1785252, 6340741, 2488702, 3720570, 2810346, 4877063, 3854293, 575662, 1907014, 3047479, 1716079, 2606512, 1612436, 1982506, 220935, 1447073, 4069988, 5950280, 5613707, 1764190, 7362662, 4327453, 1854383, 1667570, 2956296, 1578036, 354759, 2870581, 1462709, 3718084, 4797932, 3337441, 5410633, 2621030, 1837491, 2825611, 3207688, 6101891, 1977256, 3936998, 264703, 3180155, 3577533, 1889832, 1674133, 1816288, 865228, 1863285, 562845, 4140811, 3522511, 4675782, 2049637, 885029, 4888891, 3555164, 1112380, 1707338, 3141100, 1346358, 1929667, 3411709, 545781, 3931308, 2376400, 2074773, 4350786, 5696509, 1212123, 3675423, 870306, 369681, 3911642, 732670, 3208273, 5544344, 2200571, 1654575, 2870129, 2438149, 4726846, 566405, 5521249, 2964283, 1718606, 2931383, 6068515, 356909, 3387580, 3662963, 3380309, 1463033, 5696927, 3604144, 1995181, 2223354, 621792, 4298881, 2389991, 3018399, 1738402, 4216313, 1588182, 1509640, 3475709, 2732012, 3786946, 5444310, 2740735, 3678170, 1760310, 2760069, 2136431, 4414133, 2661522, 2298033, 3693685, 2041416, 2993613, 4901435, 2629615, 6954201, 1481171, 2857562, 478496, 3046275, 1961336, 1919727, 5000014, 7205609, 1728908, 446226, 1462790, 1840202, 2094275, 2889323, 2534715, 3685884, 2578386, 1396216, 2598706, 2455062, 1924872, 2824021, 3600181, 346069, 1824086, 1697385, 3066506, 5749982, 4729716, 1283844, 3012923, 3382379, 2926504, 1587344, 7710976, 7710974, 3616380, 2639492, 6144588, 3120269, 1862787, 3751081, 5142219, 7713707, 7565156, 4999998, 7713733, 7713738, 7713739, 3318990, 2999552, 3590209, 1551462, 3610719, 6065782, 3326923, 3702572, 5618430, 7713810, 2813619, 7710960, 772028, 3832217, 4002811, 1885199, 2961748, 7714393, 7714399, 7714405, 1880049, 507651, 3586875, 3167703, 1500680, 2864069, 5869453, 4243141, 4017126, 1622123, 2890988, 3547231, 1526625, 5822342, 7830576, 7830496, 3046622, 994090, 987795, 979402, 979042, 978916, 996338, 977015, 957484, 956669, 955084, 952979, 952958, 946290, 933324, 928596, 1308625, 4593667, 1604646, 3849909, 5861307, 3789713, 3702544, 7273476, 1122158, 2169032, 7710967, 7710972, 1114578, 5099663, 7699321, 7699308, 2053480, 5886401, 1716017, 3051833, 6099304, 3002720, 1983899, 1415214, 2458906, 475402, 963658, 5682829, 6110457, 2194112, 2348837, 5854095, 600830, 1593380, 2465291, 3043609, 2099718, 2151826, 3792605, 2136212, 4224284, 3606930, 2698382, 3811514, 1808948, 2989096, 2833898, 5461794, 1810151, 2426196, 2734326, 3729856, 1922275, 3555798, 2955047, 397311, 5421762, 5459409, 5771925, 6383899, 3098930, 1555120, 1911955, 804619, 3662791, 2714469, 3684474, 2222219, 1592556, 1975588, 3733183, 2897344, 2816033, 1530736, 5102095, 5103069, 5096858, 5103286, 5103299, 5103684, 5104074, 5104328, 5104587, 6416297, 7693124, 7703362, 7709014, 7709524, 7695067, 7696098, 4290900, 6763500, 5588883, 7684897, 7703436, 7709082, 7711315, 7713465, 7719312, 7114406, 7125532, 7131498, 7719320, 3712466, 1421520, 5085930, 7728553, 7728554, 7028708, 7728557, 7728559, 7728563, 7728564, 7728565, 2465159, 1795230, 3807823, 5734817, 5482355, 3744443, 551001, 551003, 5042309, 4459147, 769791, 1320200, 1503940, 3073162, 3698286, 5886620, 1749254, 1871912, 1784108, 1609088, 6061170, 1003963, 3695931, 6496933, 2432342, 3336309, 2123561, 2925655, 818675, 1229621, 3720543, 3006942, 965404, 3457522, 2729030, 2427285, 2582106, 6224102, 2211932, 5100370, 2305839, 496973, 2887090, 3572718, 3713314, 2030209, 2382163, 2988394, 5802880, 3820109, 5492111, 5208352, 6798947, 5397241, 4006346, 4974967, 2228042, 3752246, 3084900, 1679431, 3890459, 3912906, 1599083, 1783494, 1765416, 4154680, 6332412, 7132853, 3243319, 6378165, 3859455, 3576676, 3020612, 7082089, 535703, 3637586, 2906379, 1445784, 7209754, 3029793, 2602882, 3814326, 3227019, 3499994, 1922136, 3064499, 3230842, 2015865, 1945426, 1825683, 5474771, 949404, 1555649, 3897314, 1576962, 1740569, 4253476, 1509488, 5339492, 7007332, 7088744, 7616536, 5826042, 6932832, 7587074, 7584811, 5196705, 7596427, 523599, 6968005, 7632000, 7531926, 6817839, 4986806, 6727975, 6406185, 7618651, 7587169, 7586837, 6497633, 7624261, 7620850, 7620557, 7547550, 7644508, 7644506, 924611, 335672, 4551051, 5363604, 5387456, 1848021, 7715877, 295786, 7715878, 6354668, 7715880, 7715889, 7715892, 972736, 7715893, 7588081, 1124089, 1553365, 2464770, 958752, 5246780, 3684576, 2978696, 1398686, 2840285, 6415298, 3664938, 6097465, 7473176, 2499754, 2971518, 7553051, 1448994, 3775529, 7090691, 3769557, 2580890, 5654635, 3515792, 1354086, 1607271, 2864941, 3758080, 7586891, 2928937, 1479391, 6117137, 1432892, 2501960, 1725977, 3643410, 2796550, 1476546, 1077820, 4984086, 2358318, 3875982, 2232543, 3029569, 1703288, 5667629, 3848392, 596206, 2676504, 1637869, 7548567, 2962689, 4986791, 1360399, 7072684, 5182823, 1837351, 1769303, 3641438, 346677, 928304, 1654457, 1987288, 5532425, 4706955, 1354626, 4591899, 1273489, 7199616, 3699034, 7604453, 2092290, 2250327, 1611752, 1665929, 3686809, 444948, 1724476, 3343865, 1492000, 4068702, 4285551, 1567583, 3699501, 5869140, 2972854, 3711328, 2224069, 3866569, 3626395, 2372055, 2937392, 2412906, 3742961, 2730450, 4903690, 3489293, 2075791, 2081737, 3591676, 3985587, 2857172, 6168975, 6027895, 1182462, 1667979, 2883221, 920803, 411975, 1207484, 1454226, 2415010, 3716679, 6359335, 3464602, 6925000, 1990566, 2459054, 4576716, 2784397, 2455667, 5432981, 2172624, 4299202, 763383, 2154770, 914035, 1411495, 3640933, 2588439, 2649598, 3655567, 463809, 3422535, 2951560, 2981785, 3675438, 2462581, 2667977, 2763731, 551113, 3757248, 3254479, 1147674, 5719188, 3705060, 1040912, 370506, 3684002, 6620001, 3880626, 3647084, 3828207, 3537123, 3618931, 3592058, 5194293, 3211247, 3669926, 3731180, 3175085, 3988643, 2703498, 1603790, 1604481, 2240763, 4961039, 2686675, 1322970, 3837507, 3651818, 237116, 410761, 3069439, 3774885, 5840365, 3731427, 5725959, 1693284, 6380261, 377836, 7126782, 3514399, 1819063, 1553514, 5512348, 5227442, 5717626, 2876539, 5748062, 2074751, 2050140, 2550766, 2206884, 3206914, 1805487, 4097284, 3022119, 3632876, 3520474, 2643649, 7218822, 4146225, 3984929, 1667881, 418647, 1664955, 558545, 5031716, 2633481, 1384334, 2984889, 3590715, 313671, 5289725, 4252578, 4603458, 2267529, 1609914, 3824465, 4846540, 3084119, 7605580, 7605581, 7605582, 7605583, 7605585, 7605587, 7605588, 7605589, 7605590, 7605591, 7605593, 7605594, 7605595, 7605596, 7605597, 7605599, 7605600, 7605601, 4701213, 2928081, 4008546, 4807572, 1878987, 3545845, 4428798, 6024473, 1013418, 3779727, 6483218, 4739767, 2572437, 4611726, 3639522, 2952445, 1815959, 6217685, 6817815, 1631144, 2716790, 2479159, 7584196, 2892732, 3329644, 6766161, 7544571, 3569727, 5436814, 5152657, 2865540, 3747030, 763507, 1569338, 6847397, 523063, 1713599, 1053435, 4200758, 1700392, 615060, 7566415, 297935, 4425570, 4354774, 6052422, 1621816, 896160, 3514470, 1460803, 5387368, 3103524, 4870394, 3593977, 5896865, 2747553, 447416, 1937367, 1649390, 3255515, 3030719, 1978537, 974974, 1160104, 2519609, 5438063, 1698518, 1948214, 5509365, 5638527, 2479857, 2085706, 4705554, 2118873, 5086697, 5269551, 1677684, 5788578, 3896968, 3387926, 1980068, 2835893, 7593093, 5813786, 1931832, 3595417, 1647718, 2629657, 3841128, 3799998, 253185, 1485715, 3586929, 1891070, 6469397, 2593776, 2223087, 3678963, 5404111, 928932, 1374761, 1264371, 3679928, 2046467, 5171444, 5167694, 5157983, 5423355, 7571698, 2568734, 5265717, 1132547, 734801, 1165108, 6096329, 3728829, 5043345, 3658285, 3589964, 3573613, 3557368, 7445961, 2163742, 3387826, 1076550, 5069883, 1621292, 3966524, 1451655, 7596559, 7596560, 7596562, 7596691, 7596695, 7596696, 2088004, 7596699, 4889205, 916783, 2282320, 5206625, 7467156, 3979164, 3864964, 5882565, 3976691, 7598799, 7598801, 7598802, 3455263, 7598807, 1414884, 7598808, 7598809, 7598810, 7598812, 2976790, 5612226, 7598813, 7598816, 2905077, 7598817, 5521190, 7505479, 7598821, 3029253, 3014556, 4350189, 3727215, 6852010, 2971901, 2857239, 556968, 1985203, 2543526, 776388, 2586833, 376396, 1916839, 1464805, 2634571, 2960638, 6901124, 1399931, 2609575, 7589970, 7589971, 7589972, 7589973, 7589974, 7589978, 7589979, 4848465, 3901079, 6205585, 7589982, 7589984, 7589985, 7589986, 7589987, 7589988, 1585804, 3919924, 4067778, 2340745, 3533379, 2969546, 5576533, 2510021, 1890436, 1980004, 5845176, 7590090, 5853829, 2571202, 3543036, 2877339, 1846397, 7140150, 5629504, 3704320, 2223149, 3185643, 6618462, 1529469, 1891368, 5941925, 3118877, 1549214, 1730735, 802902, 2663439, 1663236, 3430946, 1382959, 2326215, 5571331, 2002651, 1553455, 2479609, 1352254,5993828, 2354782, 6068555, 5908497, 6105601, 6109924, 6112060, 6128940, 6133550, 6140452, 6144648, 6179628, 6197672, 6203488, 6207152, 1742587, 3659613, 2431609, 1536702, 6203635, 650830, 2798632, 5460163, 4883143, 2149868, 5510498, 7579758, 3808106, 2893867, 2032283, 2631904, 1841509, 2414847, 3357194, 2174969, 2703901, 3694470, 3839094, 5537746, 728208, 4160966, 1931520, 3835106, 2805936, 3018949, 3298590, 4273592, 3673153, 1886819, 3120127, 5745602, 5784632, 3305227, 2749185, 3100074, 3764961, 421611, 3166741, 5718531, 1641988, 3072114, 3718648, 3696531, 4995458, 1489352, 5332812, 3990225, 2624923, 2031223, 1868778, 3913081, 1149838, 2330762, 3742469, 846554, 6304005, 5582180, 2156077, 6507889, 304475, 3745615, 3561381, 3132933, 3697800, 3149627, 5302706, 4106370, 2793053, 1860112, 2340145, 1289525, 7404080, 1661675, 1324386, 1179152, 1740676, 2109767, 708823, 5343022, 420771, 2667812, 2733535, 3699329, 1770511, 2656391, 1819753, 3853276, 2480456, 1460852, 1363261, 1425622, 385105, 3800097, 5061445, 1994320, 4309546, 3239127, 1286937, 2847679, 2319181, 1881982, 5329128, 1707180, 1055018, 1866817, 1700898, 4148579, 2310887, 1697320, 2874444, 2449214, 687298, 3285999, 3696921, 5119425, 2476398, 3604500, 5540020, 4513718, 3921722, 5160514, 6300073, 3197249, 1405239, 2620598, 1428463, 1480565, 992578, 1424798, 1780210, 2440885, 7366567, 2698054, 7594750, 7594753, 7594756, 7594758, 7594759, 2420501, 7594767, 7594769, 7594779, 7594785, 7594786, 2048050, 5001366, 1510818, 1313887, 5092201, 2550414, 5771583, 5745150, 3768800, 1203713, 2031462, 605936, 5043256, 3684726, 4241064, 3652112, 3797080, 1502512, 2398459, 1686942, 1772458, 2415314, 2581348, 2081656, 5941814, 591201, 2025979, 1733434, 2575661, 3484494, 1587693, 3654164, 5760249, 3617288, 2853632, 1851969, 2960319, 2742266, 293407, 4698671, 2740472, 3676395, 3679140, 5472351, 6777359, 1803169, 3690316, 5538831, 116040, 5239176, 901784, 7595741, 7595742, 4441552, 876613, 7595749, 7595752, 7595753, 7595755, 3024291, 3559791, 866665, 7595759, 7595760, 7595761, 7116999, 7595768, 7595771, 7595773, 1867649, 1844404, 2319756, 1921105, 481141, 3710878, 3745348, 1551411, 599339, 1132841, 3186738, 1445806, 2950316, 1999433, 7588217, 7588218, 7588221, 7588222, 7588224, 7588225, 7588230, 7588238, 3517551, 7588239, 7588243, 7588246, 7588249, 7588253, 7588256, 7588257, 4564380, 1709079, 1463576, 2473784, 1990585, 4225415, 3534755, 1529753, 6568183, 3964168, 4465679, 5830619, 3084024, 2978758, 2207242, 2828225, 1430257, 5083570, 1503669, 3658619, 7301894, 912490, 3637190, 3690789, 1469911, 5086164, 3702120, 721910, 3668632, 3891989, 3865829, 1807161, 2681705, 2013606, 1220037, 7586577, 7586579, 7586582, 7586585, 7586587, 7586589, 7586591, 7586592, 7586594, 7586595, 7586598, 7586600, 7586601, 7586603, 1053539, 1721251, 5478906, 6205970, 3156745, 4348352, 3241835, 3326440, 1569481, 3636571, 2986279, 1643776, 3837289, 5431781, 6752042, 2418253, 2416543, 3358124, 1712441, 193187, 1608238, 1819776, 3480598, 2626804, 3581991, 3898426, 2481042, 3181008, 4182202, 5611222, 2100416, 2816064, 2543452, 3932685, 5105940, 389768, 5395761, 3697752, 1967351, 6830525, 3896856, 2705995, 3489333, 5484871, 2501538, 5313078, 1118306, 4818087, 3428934, 3757278, 5523199, 1519256, 2894515, 3150084, 1468561, 5499302, 4900101, 3570936, 7585876, 7585892, 3520878, 7585903, 7585907, 7585908, 7585911, 7585912, 6733104, 521756, 2785571, 7243656, 2504433, 268985, 4697282, 2857448, 2457864, 1387242, 2983538, 1746823, 6872493, 3851834, 3143538, 468972, 5814223, 3841284, 3630979, 3216342, 2774931, 677608, 895971, 3564891, 3676523, 2159625, 3697872, 6121939, 3806103, 5539855, 2185227, 2445318, 2973285, 6203577, 1606904, 3190335, 6103100, 1590935, 2154166, 6202855, 2767238, 3539557, 531393, 1537810, 7521287, 5000056, 2962094, 3549002, 7259687, 1699725, 1451996, 1610004, 1338610, 296361, 1548446, 3023500, 4380537, 7074890, 3520951, 1652941, 3755613, 4009415, 401705, 2237427, 6201167, 5255657, 533946, 3015348, 4234518, 852036, 4271527, 3661778, 1580042, 2880295, 1616692, 2413286, 3988481, 2583328, 3221567, 1453388, 2972456, 5017009, 3663231, 3491935, 3478705, 1891199, 1706451, 1691451, 3685069, 1964070, 5070340, 1972853, 2178289, 1418353, 3849085, 4298073, 2211530, 1845355, 6109280, 2035594, 7583983, 1999538, 7583985, 1407496, 885790, 3717973, 3906543, 5948551, 5976869, 2452276, 6070666, 1487531, 3026533, 1975642, 6714712, 3217173, 542206, 2913914, 5656820, 1780844, 7227763, 7584187, 2668543, 7584191, 7584192, 7584193, 7584194, 7584195, 5707667, 7584197, 7584202, 1840109, 3035430, 3641597, 5723425, 716454, 1748936, 2698747, 2024218, 3204335, 2833702, 505805, 3696199, 3089894, 1828315, 3069262, 3750609, 2731707, 3729330, 1794589, 2017255, 7491603, 6840620, 6965421, 3164541, 3685464, 2054943, 365315, 5813469, 1033390, 7054190, 1124859, 3641873, 3661173, 1473836, 2431444, 5737012, 2423265, 1705725, 1949215, 1589402, 5710452, 5919033, 2879902, 3497217, 6571252, 3433197, 6726790, 1380450, 2543093, 5265432, 2905532, 2479621, 1973197, 1349271, 5559971, 7066091, 5520818, 2613717, 3676771, 1278553, 3604629, 1652907, 5804164, 1994754, 7121654, 1672102, 3579181, 3747997, 136372, 2918560, 2363401, 2203543, 854252, 7002137, 2459502, 3587695, 2053429, 734286, 3707753, 5784387, 1265041, 6798468, 3772198, 4244560, 2673219, 1695546, 2994363, 2730612, 3110056, 3701884, 3350141, 3458781, 112125, 7294527, 3099936, 2317494, 2286884, 1620205, 1941646, 2451539, 5462759, 1752343, 1291046, 1767282, 1634135, 4940660, 395638, 1982490, 1476917, 1520050, 5046251, 7111081, 3486777, 339688, 2242986, 1465794, 2925302, 1705533, 2922706, 4836774, 3660363, 745660, 3169468, 1520763, 3509457, 3569617, 6648567, 862026, 2023835, 1294506, 3343007, 2226606, 3683984, 1700134, 3292563, 7458781, 2060440, 3777791, 3219347, 6020360, 6886256, 1585825, 4483044, 2054433, 3823226, 7014627, 1416017, 1569410, 2901923, 5597196, 3368095, 1959434, 5120511, 3800025, 3903481, 6025066, 840023, 2682348, 3699720, 2896854,3688479, 1555263, 809981, 585601, 1375127, 1596918, 360669, 2840545, 5635682, 1846140, 2615488, 2849336, 3201680, 1231531, 3608639, 3146467, 5324271, 3120589, 3680975, 5517500, 3089475, 3192865, 447198, 5133665, 3565552, 1662547, 2770880, 1311245, 6149285, 6569917, 1002415, 562828, 3245190, 5484232, 2459645, 3568909, 1203580, 4082130, 2222106, 6827736, 1605542, 5782928, 1733405, 7073872, 2003397, 3176790, 3193031, 3495072, 5246769, 3806514, 444669, 4346701, 3637879, 1651912, 2810301, 2483585, 6013518, 2967201, 1712139, 1434614, 1486073, 796522, 1704970, 6006077, 2904194, 2299901, 7379672, 3695243, 1646580, 2558489, 3721136, 1650589, 3624946, 6557245, 3912825, 5166234, 3029129, 1477421, 1737233, 2038475, 1446502, 2012857, 1958837, 5432386, 6042206, 243962, 5070428, 2198167, 2749103, 1369255, 2557752, 2371914, 5188867, 3731931, 3238202, 1439286, 5176687, 1446952, 1142162, 3328963, 721229, 6050971, 3531249, 3756184, 1532940, 6660659, 3184847, 1971197, 3832344, 5293621, 2239095, 7581422, 3379444, 7581425, 5402499, 7581426, 7581430, 7581431, 7581433, 857969, 7090005, 7581435, 7581437, 7581441, 7581442, 7581443, 7581444, 7581445, 7581446, 7581447, 7581448, 7581449, 7581450, 7560419, 7581453, 7581456, 7581457, 7581458, 5746152, 7227007, 4864351, 3060011, 5200910, 3257930, 2398407, 1544861, 3144670, 1644081, 1580374, 5796038, 2815472, 5681686, 3100650, 2692126, 1741073, 2102814, 3710363, 1402257, 3615479, 2808418, 5756977, 2129581, 2716169, 1609642, 3702443, 4359062, 5524577, 2274853, 3831715, 3478750, 554595, 3681488, 3429348, 808903, 1815144, 1997567, 2984611, 4966199, 2479767, 3350174, 2977670, 5758757, 1776462, 6032284, 1494544, 4211491, 1819646, 2787653, 2915889, 4723257, 1284922, 3402209, 5544351, 5096786, 1421488, 1319953, 2151630, 3090268, 3728775, 2696883, 6975901, 1682563, 1055301, 4089620, 5493813, 3388889, 3873919, 3621510, 2040327, 7563886, 7563888, 1703062, 1770702, 2049829, 1031162, 1940633, 1477077, 3485112, 3650626, 2240014, 3000880, 4833628, 1568124, 2599257, 2457551, 3963989, 1923304, 319426, 2064891, 5952334, 5854437, 2962820, 3909564, 3110731, 3746970, 3671792, 630767, 3960389, 4625712, 1473876, 7088745, 6647453, 3236460, 1391129, 3894282, 1664227, 2816435, 5838710, 3285994, 5017387, 2306483, 5568574, 1183614, 6255741, 4143293, 5327280, 3361351, 1792257, 2797861, 2954979, 3881931, 3733964, 2320378, 7574387, 7574390, 2882873, 2695460, 5597023, 2098179, 2201219, 5736061, 1582926, 1677763, 3828678, 1878759, 3067756, 6717825, 6731562, 6820863, 5865143, 278585, 1821529, 6800839, 141355, 1220087, 2922338, 411415, 5604555, 6453895, 7288042, 2011033, 1056854, 3041398, 311316, 7514011, 2211509, 2982818, 1566653, 3357603, 2802076, 454094, 1143472, 5661746, 4130245, 1380341, 7574381, 3413565, 3755295, 3006464, 2428982, 3452457, 2736710, 2713132, 6526973, 2425058, 5489217, 5231904, 3164976, 3783573, 2141733, 5281388, 2624327, 2455731, 4306045, 3318104, 4427048, 5896853, 1642281, 3095578, 3821686, 2247536, 524651, 3635836, 2429975, 2982051, 1854121, 313539, 1357903, 3915506, 1213682, 3569080, 1676593, 2187555, 2200136, 1739798},
		rotationused = {},
		antileve = {7794534, 7762520, 7835814, 7835821, 7835822, 7835825, 7835826, 7838841, 6641062, 6641147, 6641130, 6641108, 6641063, 6640755, 6641141, 6641097, 6641144, 6641111, 6641110, 6641087, 6641075, 6641132, 6641101, 6641090, 6641077, 6641069, 6641067, 6641064, 6641058, 6640884, 6640869, 6640866, 6640860, 6640859, 6640858, 6640854, 6640852, 6640846, 6640833, 6640816, 6640808, 6640737, 6641109, 6641096},
		time = 93
	}
}
local nmodes = 0
for k in next, Modes do nmodes = nmodes + 1 end
local Mode = "Racing"
local Mix = false
local Teams = {
	[1] = { 
		name = "Team1",
		color = "DE3669",
		players = {},
		points = 0
	},
	[2] = {
		name = "Team2",
		color = "4EA0EE",
		players = {},
		points = 0
	},
	[3] = {
		name = "Team3",
		color = "4EA0EE",
		players = {},
		points = 0
	},
	[4] = {
		name = "Team4",
		color = "FFF459",
		players = {},
		points = 0
	}
}
local winplayers = {}
local nteams = 2
local anti_leve = false
local troll_map = false
local np_map = false
local np = ""
local Point = false
local mice_info = {}
local Ban = {}
local PlayersBan = {}
local Playerslog = {}
local vote = {}
local Cooldown = {fill = 0}
local macro_time = 2000 
local macro_warn = 15 
local macro_freeze = 23 
local macro_keys = {[38] = "Up", [87] = "W", [90] = "Z"} 
local macro_info = {} 
local concatenation = {}

table_clear = function(t, obj) for i,v in ipairs(t) do if v==obj then table.remove(t,i) end end end
table_contain = function(t, obj) for _,v in next, t do if v==obj then return true end end return false end

Main = function()
	system.disableChatCommandDisplay(nil)
	for _, k in next, {"DebugCommand", "AutoNewGame", "AutoShaman", "AutoScore", "AutoTimeLeft", "PhysicalConsumables"} do tfm.exec["disable"..k]() end
	for k in next, room.playerList do eventNewPlayer(k) end
	Interface()
end

Interface = function()
	newGame('<C><P DS="y;200" /><Z><S><S T="12" X="400" Y="200" L="3000" H="3000" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="12" X="400" Y="395" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="ffffff"/><S T="12" X="5" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="ffffff"/><S T="12" X="795" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="ffffff"/><S T="12" X="400" Y="5" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="ffffff"/><S T="0" X="5" Y="5" L="10" H="10" P="0,0,0.3,0.2,0,0,0,0" i="0,0,1790ef271c1.jpg"/></S><D/><O/><L><JD c="000000,250,0.6,1" P1="-25,25" P2="825,25"/><JD c="000000,250,0.6,1" P1="-25,275" P2="825,275"/></L></Z></C>', false)
	tfm.exec.setUIMapName("#V/S Teams") 
	tfm.exec.setGameTime(99999)
	PublicAreas() 
	for _, name in next, admin do AdminAreas(name) PublicAreas(name) end
	TeamAreas()
end

TeamAreas = function(player)
	local x = 0
	if nteams == 4 then x = 40
	elseif nteams == 3 then x = 132
	else x = 225 
	end
	area(1, "<font color='#"..Teams[1].color.."'><p align='center'>"..Teams[1].name.."\n┉┉┉┉┉┉┉┉┉┉┉┉┉┉</p>"..table_concat(Teams[1].players,"\n", 1, math.min(13, #Teams[1].players)) or "", player, x, 75, 165, 200, 0x1, "0x"..Teams[1].color, 0.5, false)
	area(2, "<font color='#"..Teams[2].color.."'><p align='center'>"..Teams[2].name.."\n┉┉┉┉┉┉┉┉┉┉┉┉┉┉</p>"..(table_concat(Teams[2].players,"\n", 1, math.min(13, #Teams[2].players)) or ""), player, x+185, 75, 165, 200, 0x1, "0x"..Teams[2].color, 0.5, false)
	if nteams >= 3 then
		area(3, "<font color='#"..Teams[3].color.."'><p align='center'>"..Teams[3].name.."\n┉┉┉┉┉┉┉┉┉┉┉┉┉┉</p>"..(table_concat(Teams[3].players,"\n", 1, math.min(13, #Teams[3].players)) or ""), player, x+370, 75, 165, 200, 0x1, "0x"..Teams[3].color, 0.5, false)
	end
	if nteams == 4 then
		area(4, "<font color='#"..Teams[4].color.."'><p align='center'>"..Teams[4].name.."\n┉┉┉┉┉┉┉┉┉┉┉┉┉┉</p>"..(table_concat(Teams[4].players,"\n", 1, math.min(13, #Teams[4].players)) or ""), player, x+555, 75, 165, 200, 0x1, "0x"..Teams[4].color, 0.5, false)
	end
end

PublicAreas = function(player)
	area(0, "<pt>Host: "..room.loader, player, 5, 380, nil, 20, 0x1, 0x1, 0, false)
	area(5, "<p align='center'><font size='15' face='impact'><ch>Mode: "..(Mix and "Mix" or Mode).." <n2>  |  </n2> D: "..Pwin, player, 300, 20, 200, 25, 0xA0A0A0, 0x1, 0, false)
	local i = 11
	local x = 365-(40*nmodes)
	for name, data in next, Modes do
		area(i, (isAdmin(player) and "<a href='event:"..name.."'>" or "").."<p align='center'>"..name, player, x, 45, 70, 20, 0x1, 0xA0A0A0, 0.6, false)
		i = i + 1
		x = x + 80
	end
	area(i, (isAdmin(player) and "<a href='event:Mix'>" or "").."<p align='center'>Mix", player, x, 45, 70, 20, 0x1, 0xA0A0A0, 0.6, false)
end

AdminAreas = function(player)
	area(6, "<t><b><p align='center'><a href='event:start'>Start", player, 360, 285, 80, 20, 0x1, 0xFFD991, 1, false)
	area(7, "Auto-join: <a href='event:OnAndOff'>"..(AutoJoin and "<vp>on</vp>" or not AutoJoin and "<r>off</r>"), player, 205, 315, 90, 20, 0x1, 0x1, 0.6, false)
	area(8, "Teams: <a href='event:-'>-</a> " ..nteams.. " <a href='event:+'>+", player, 305, 315, 90, 20, 0x1, 0x1, 0.6, false)
	area(9, "<p align='center'><a href='event:fill'>Fill teams", player, 405, 315, 90, 20, 0x1, 0x1, 0.6, false)
	area(10, "Score: <a href='event:-'>-</a> " ..Pwin.. " <a href='event:+'>+", player, 505, 315, 90, 20, 0x1, 0x1, 0.6, false)
	area(1000, "<a href='event:info'><p align='center'>Commands", player, 35, -23, 80, 23, 0x1, 0xff8547, 0.4, true)
end

FillTeams = function()
	for i=1,4 do Teams[i].players = {} end
	local Players = {}
	local Team = 1
	for player in next, room.playerList do if isPlayer(player) then table.insert(Players, player) end end
	for i = 1, #Players do
		player = math.random(#Players)
		addPlayer = Players[player]
		table.remove(Players, player)
		table.insert(Teams[Team].players, addPlayer)
		Team = Team + 1
		if Team == nteams+1 then Team = 1 end
	end
end

Autojoin = function(player)
	local team1 = Teams[1].players
	local team2 = Teams[2].players
	local team3 = Teams[3].players
	local team4 = Teams[4].players
	if isPlayer(player) then
		if nteams == 4 then
			if #team1 <= #team2 and #team1 <= #team3 and #team1 <= #team4 then table.insert(team1, player)
			elseif #team2 < #team1 and #team2 <= #team3 and #team2 <= #team4 then table.insert(team2, player)
			elseif #team3 < #team1 and #team3 < #team2 and #team3 <= #team4 then table.insert(team3, player)
			elseif #team4 < #team1 and #team4 < #team2 and #team4 < #team3 then table.insert(team4, player)
			else table.insert(team1, player) 
			end
		elseif nteams == 3 then
			if #team1 <= #team2 and #team1 <= #team3 then table.insert(team1, player)
			elseif #team2 < #team1 and #team2 <= #team3 then table.insert(team2, player)
			elseif #team3 < #team1 and #team3 < #team2 then table.insert(team3, player)
			else table.insert(team1, player)
			end
		else
			if #team1 <= #team2 then table.insert(team1, player)
			elseif #team1 > #team2 then table.insert(team2, player)
			end
		end
	end
end

mapName = function()
	local Team1 = "<font color='#"..Teams[1].color.."'>"..Teams[1].name..": "..Teams[1].points
	local Team2 = "<font color='#"..Teams[2].color.."'>"..Teams[2].name..": "..Teams[2].points
	local Team3 = "<font color='#"..Teams[3].color.."'>"..Teams[3].name..": "..Teams[3].points
	local Team4 = "<font color='#"..Teams[4].color.."'>"..Teams[4].name..": "..Teams[4].points
	local d = "<n>D: "..Pwin
	local space = "<n2> | "
	if nteams == 4 then 
		tfm.exec.setUIMapName(Team1..space..Team2..space..Team3..space..Team4..space..d)
	elseif nteams == 3 then 
		tfm.exec.setUIMapName(Team1..space..Team2..space..Team3..space..d)
	else
		tfm.exec.setUIMapName(Team1..space..Team2..space..d)
	end
end

Vote = function()
	for k in next, mice_info do mice_info[k].vote = false end
	vote = {racing = 0, burlas = 0, bootcamp = 0, vanilla = 0, normal = 0, mix = 0}
	area(-3, "", nil, 0, 5, 800, 400, 0x1, 0x1, 0.8, true)
	area(-4, "<p align='center'><font size='18' face='Times New Roman'><i>Vote</i></font>\n┉┉┉┉┉┉┉┉┉┉┉┉</p><font size='14'><a href='event:mrc'>Racing</a>\n<a href='event:mbr'>Burlas</a>\n<a href='event:mbc'>Bootcamp</a>\n<a href='event:mvn'>Vanilla</a>\n<a href='event:mp1'>Normal (p1)</a>\n<a href='event:mmix'>Mix</a></font>\n<p align='center'>┉┉┉┉┉┉┉┉┉┉┉┉", nil, 325, 110, 150, 150, 0x1e3d42, 0x8c5a3d, 1, true)
	VoteOn = os.time() + 13000
end

newMap = function()
	if np_map then 
		newGame(map)
		tfm.exec.setGameTime(93)
	else
		local rotation = anti_leve and Modes[Mode].antileve or troll_map and Modes[Mode].troll or Modes[Mode].rotation
		local map
		map = rotation[math.random(#rotation)]
		newGame(map)
		if table_contain(Modes[Mode].rotation, map) then table.insert(Modes[Mode].rotationused, map) table_clear(Modes[Mode].rotation, map) end
		if #Modes[Mode].rotation == 0 then for _, maps in next, Modes[Mode].rotationused do table.insert(Modes[Mode].rotation, maps) end Modes[Mode].rotationused = {} end
		tfm.exec.setGameTime(Modes[Mode].time)
		if Mix and not anti_leve and not troll_map then
			if Mode == "Racing" then Mode = "Bootcamp"
			elseif Mode == "Bootcamp" then Mode = "Vanilla"
			elseif Mode == "Vanilla" then Mode = "Racing"
			end
		end
	end
end

ResetScript = function()
	FinishGame = nil
	VoteOn = nil
	VoteResult = nil
	for i=-4,25 do rarea(i) end
	GameStarted = false
	Finish = false
	winplayers = {}
	Interface()
end

isPlayer = function(player) 
	for name, data in next, room.playerList do
		local current = os.time()
		local time = current - data.registrationDate
		local days = time/86400000
		local hours = days*24
		hours = hours-hours%0.1 
		if NoGuest then 
			if name == player and not string.find(name, '*') and hours > 5 and not table_contain(Ban, name.." - "..mice_info[name].ban) then return true end
		else
			if name == player and not table_contain(Ban, name.." - "..mice_info[name].ban) then return true end
		end
	end 
	return false 
end
isAdmin = function(player) for p = 1, #admin do if player == admin[p] then return true end end return false end
isPlaying = function(player) 
	for _, name in next, Teams[1].players do if name == player then return true end end
	for _, name in next, Teams[2].players do if name == player then return true end end
	if nteams >= 3 then for _, name in next, Teams[3].players do if name == player then return true end end end
	if nteams == 4 then for _, name in next, Teams[4].players do if name == player then return true end end end
	return false
end

eventNewPlayer = function(player)
	local info = {}
	for key in next, macro_keys do
		info[key] = {0, os.time() + macro_time, false, false}
		system.bindKeyboard(player, key, true, true)
	end
	macro_info[player] = info
	if table_contain(Playerslog, player) then
		table_clear(Playerslog, player) 
		if table_contain(Ban, player.." - "..mice_info[player].ban) then 
			mice_info[player].imgban = tfm.exec.addImage("178f686f863.png", ":1", 153, -50, player)
			area(666, "<p align='center'>You have been banned from the room. Reason: "..mice_info[player].ban, player, 300, 270, 200, 80, 0x1, 0x1, 0, true)
			area(6666, "<a href='event:close'><p align='center'>Close", player, 285, 365, 230, 20, 0x1, 0x1, 0, true)
		end
		if GameStarted then
			tfm.exec.setPlayerScore(player, mice_info[player].points, false)
			if not isPlaying(player) and AutoJoin then Autojoin(player) end 
		end
	else 
		mice_info[player] = {points = 0, ban = "", vote = false, freeze = false} 
		if AutoJoin and GameStarted then Autojoin(player) end
	end
	if GameStarted then
		if isAdmin(player) then area(1000, "<a href='event:info'><p align='center'>Commands", player, 35, -23, 80, 23, 0x1, 0xff8547, 0.4, true) end
	else
		PublicAreas(player) 
		if isAdmin(player) then AdminAreas(player) end
		TeamAreas(player) 
		tfm.exec.respawnPlayer(player)
	end
	area(999, "<font face='Times New Roman' size='20'><a href='event:info'><i><p align='center'>i", player, 5, -23, 20, 23, 0x1, 0xff8547, 0.4, true)
end

eventPlayerLeft = function(player)
	table.insert(Playerslog, player)
end

eventPlayerDied = function(player)
	if GameStarted then 
		local alive = false
		for _,player in next, room.playerList do
			if not player.isDead then
				alive = true
				break
			end
		end
		if not alive and not Point then newMap() end
	end
end

eventPlayerWon = function(player)
	if GameStarted then
		if not Point then
			Point = true
			tfm.exec.setGameTime(5)
			tfm.exec.setPlayerScore(player, 1, true)
			mice_info[player].points = mice_info[player].points + 1
			if table_contain(Teams[1].players, player) then
				Teams[1].points = Teams[1].points + 1
				if Teams[1].points >= Pwin then
					Finish = true
					for _, name in next, Teams[1].players do table.insert(winplayers, name) end
					FinishGame = os.time() + 13000
					if nteams >= 3 then
						newGame('<C><P DS="y;200" /><Z><S><S T="12" X="400" Y="200" L="3000" H="3000" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="0" X="5" Y="5" L="10" H="10" P="0,0,0.3,0.2,0,0,0,0" i="0,0,1790ef271c1.jpg"/><S T="12" X="500" Y="200" L="600" H="400" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="12" X="400" Y="395" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[1].color..'"/><S T="12" X="5" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[1].color..'"/><S T="12" X="795" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[1].color..'"/><S T="12" X="400" Y="5" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[1].color..'"/></S><D/><O/><L/></Z></C>', false)
						area(-2, "<p align='center'><font color='#"..Teams[1].color.."' size='38' face='impact'>"..Teams[1].name.." <n>won the game!</n>\n<font color='#"..Teams[1].color.."' size='22'>"..player.." <n>made the last point!", nil, 280, 150, 500, 80, 0x1, 0x1, 0, false)
					else
						newGame('<C><P DS="y;200" /><Z><S><S T="0" X="5" Y="5" L="10" H="10" P="0,0,0.3,0.2,0,0,0,0" i="0,0,1790ef271c1.jpg"/><S T="12" X="600" Y="200" L="400" H="400" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="12" X="88" Y="200" L="176" H="400" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="12" X="400" Y="395" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[1].color..'"/><S T="12" X="5" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[1].color..'"/><S T="12" X="795" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[1].color..'"/><S T="12" X="400" Y="5" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[1].color..'"/></S><D/><O/><L/></Z></C>', false)
						area(-2, "<p align='center'><font color='#"..Teams[1].color.."' size='38' face='impact'>"..Teams[1].name.." <n>won the game!</n>\n<font color='#"..Teams[1].color.."' size='22'>"..player.." <n>made the last point!", nil, 320, 150, 500, 80, 0x1, 0x1, 0, false)
					end
					tfm.exec.setGameTime(13)
				end
			elseif table_contain(Teams[2].players, player) then
				Teams[2].points = Teams[2].points + 1
				if Teams[2].points >= Pwin then
					Finish = true
					for _, name in next, Teams[2].players do table.insert(winplayers, name) end
					FinishGame = os.time() + 13000
					if nteams >= 3 then
						newGame('<C><P DS="y;200" /><Z><S><S T="12" X="400" Y="200" L="3000" H="3000" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="0" X="5" Y="5" L="10" H="10" P="0,0,0.3,0.2,0,0,0,0" i="0,0,1790ef271c1.jpg"/><S T="12" X="600" Y="200" L="400" H="400" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="12" X="88" Y="200" L="176" H="400" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="12" X="400" Y="395" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[2].color..'"/><S T="12" X="5" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[2].color..'"/><S T="12" X="795" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[2].color..'"/><S T="12" X="400" Y="5" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[2].color..'"/></S><D/><O/><L/></Z></C>', false)
						area(-2, "<p align='center'><font color='#"..Teams[2].color.."' size='38' face='impact'>"..Teams[2].name.." <n>won the game!</n>\n<font color='#"..Teams[2].color.."' size='22'>"..player.." <n>made the last point!", nil, 320, 150, 500, 80, 0x1, 0x1, 0, false)
					else
						newGame('<C><P DS="y;200" /><Z><S><S T="12" X="400" Y="200" L="3000" H="3000" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="0" X="5" Y="5" L="10" H="10" P="0,0,0.3,0.2,0,0,0,0" i="0,0,1790ef271c1.jpg"/><S T="12" X="200" Y="200" L="400" H="400" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="12" X="710" Y="200" L="180" H="400" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="12" X="400" Y="395" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[2].color..'"/><S T="12" X="5" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[2].color..'"/><S T="12" X="795" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[2].color..'"/><S T="12" X="400" Y="5" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[2].color..'"/></S><D/><O/><L/></Z></C>', false)
						area(-2, "<p align='center'><font color='#"..Teams[2].color.."' size='38' face='impact'>"..Teams[2].name.." <n>won the game!</n>\n<font color='#"..Teams[2].color.."' size='22'>"..player.." <n>made the last point!", nil, -30, 150, 500, 80, 0x1, 0x1, 0, false)
					end
					tfm.exec.setGameTime(13)
				end
			elseif table_contain(Teams[3].players, player) then
				Teams[3].points = Teams[3].points + 1
				if Teams[3].points >= Pwin then
					Finish = true
					for _, name in next, Teams[3].players do table.insert(winplayers, name) end
					FinishGame = os.time() + 13000
					newGame('<C><P DS="y;200" /><Z><S><S T="12" X="400" Y="200" L="3000" H="3000" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="0" X="5" Y="5" L="10" H="10" P="0,0,0.3,0.2,0,0,0,0" i="0,0,1790ef271c1.jpg"/><S T="12" X="200" Y="200" L="400" H="400" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="12" X="710" Y="200" L="180" H="400" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="12" X="400" Y="395" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[3].color..'"/><S T="12" X="5" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[3].color..'"/><S T="12" X="795" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[3].color..'"/><S T="12" X="400" Y="5" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[3].color..'"/></S><D/><O/><L/></Z></C>', false)
					area(-2, "<p align='center'><font color='#"..Teams[3].color.."' size='38' face='impact'>"..Teams[3].name.." <n>won the game!</n>\n<font color='#"..Teams[3].color.."' size='22'>"..player.." <n>made the last point!", nil, -30, 150, 500, 80, 0x1, 0x1, 0, false)
					tfm.exec.setGameTime(13)
				end
			elseif table_contain(Teams[4].players, player) then
				Teams[4].points = Teams[4].points + 1
				if Teams[4].points >= Pwin then
					Finish = true
					for _, name in next, Teams[4].players do table.insert(winplayers, name) end
					FinishGame = os.time() + 13000
					newGame('<C><P DS="y;200" /><Z><S><S T="12" X="400" Y="200" L="3000" H="3000" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="0" X="5" Y="5" L="10" H="10" P="0,0,0.3,0.2,0,0,0,0" i="0,0,1790ef271c1.jpg"/><S T="12" X="305" Y="200" L="610" H="400" P="0,0,0.3,0.2,0,0,0,0" o="000000" c="4"/><S T="12" X="400" Y="395" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[4].color..'"/><S T="12" X="5" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[4].color..'"/><S T="12" X="795" Y="200" L="10" H="400" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[4].color..'"/><S T="12" X="400" Y="5" L="800" H="10" P="0,0,0.3,0.2,0,0,0,0" o="'..Teams[4].color..'"/></S><D/><O/><L/></Z></C>', false)
					area(-2, "<p align='center'><font color='#"..Teams[4].color.."' size='38' face='impact'>"..Teams[4].name.." <n>won the game!</n>\n<font color='#"..Teams[4].color.."' size='22'>"..player.." <n>made the last point!", nil, 50, 150, 500, 80, 0x1, 0x1, 0, false)
					tfm.exec.setGameTime(13)
				end
			end
		mapName()
		end
	end
end

eventNewGame = function()
	for k in next, mice_info do mice_info[k].freeze = false end
	if GameStarted then
		for name in next, room.playerList do if not isPlaying(name) then tfm.exec.killPlayer(name) end end
		Point = false
		anti_leve = false
		troll_map = false
		np_map = false
		mapName()
		for _, Team in next, Teams do for _, name in next, Team.players do tfm.exec.setNameColor(name, "0x"..Team.color) end end
		if Finish then for name in next, room.playerList do if not table_contain(winplayers, name) then tfm.exec.killPlayer(name) end end	end
	end
end

eventKeyboard = function(player, key)
    if not macro_keys[key] then return end
    local info = macro_info[player][key]
	local now = os.time()
	info[1] = info[1] + 1
	if now >= info[2] then
		if info[4] and mice_info[player].freeze == false then
			local count = 3
			concatenation[1] = "<r>[AntiMacro] <bv>"
			concatenation[2] = player
			concatenation[3] = "<bl> frozen."
			local data
			for _key, name in next, macro_keys do
				data = macro_info[player][_key]
				count = count + 4
				concatenation[count - 3] = " "
				concatenation[count - 2] = name
				concatenation[count - 1] = ": "
				if now >= data[2] and info ~= data then
					concatenation[count] = "0"
				else
					concatenation[count] = data[1]
				end
			end
			local msg = table.concat(concatenation, "", 1, count)
			tfm.exec.chatMessage(msg)
            print(msg)
			tfm.exec.freezePlayer(player)
			mice_info[player].freeze = true
		end
		info[1] = 1
		info[2] = now + macro_time
		info[3] = false
		info[4] = false
		return
	elseif not info[3] and info[1] >= macro_warn and mice_info[player].freeze == false then
		info[3] = true
		local count = 3
		concatenation[1] = "<j>[AntiMacro] <bv>"
		concatenation[2] = player
		concatenation[3] = "<bl> may be using macros."
		local data
		for _key, name in next, macro_keys do
			data = macro_info[player][_key]
			count = count + 4
			concatenation[count - 3] = " "
			concatenation[count - 2] = name
			concatenation[count - 1] = ": "
			if now >= data[2] then
				concatenation[count] = "0"
			else
				concatenation[count] = data[1]
			end
		end
		local msg = table.concat(concatenation, "", 1, count)
		print(msg)
	elseif not info[4] and info[1] >= macro_freeze then
		info[4] = true
	end
end

eventChatCommand = function(player, command)
	local cmd, args, pointer = "", {}, -1
	for slice in string.gmatch(command, "%S+") do
		pointer = pointer + 1
		if pointer == 0 then
			cmd = string.lower(slice)
		else
			args[pointer] = slice
		end
	end
	if string.sub(cmd, 1, 3) == "vs." then
    	cmd = string.sub(cmd, 4, #cmd)
	end
if isAdmin(player) then
	if cmd == "ms" then
		tfm.exec.chatMessage("<fc>• [FunCorp] " .. table_concat(args, " "))
	elseif cmd == "reset" then
		ResetScript()
	elseif cmd == "clear" then
		if args[1] == "team1" then Teams[1].players = {}
		elseif args[1] == "team2" then Teams[2].players = {}
		elseif args[1] == "team3" then Teams[3].players = {}
		elseif args[1] == "team4" then Teams[4].players = {}
		elseif args[1] == "all" then for t=1,4 do Teams[t].players = {} end
		else for t=1,4 do Teams[t].players = {} end
		end
		if not GameStarted then TeamAreas() end
	elseif cmd == "d" and tonumber(args[1]) ~= nil then
		if tonumber(args[1]) >= 1 and tonumber(args[1]) <= 999 then
			Pwin = tonumber(args[1])
			if GameStarted then mapName()
			else
			uparea(5, "<p align='center'><font size='15' face='impact'><ch>Mode: "..(Mix and "Mix" or Mode).." <n2>  |  </n2> D: "..Pwin, nil)
			uparea(10, "Score: <a href='event:-'>-</a> " ..Pwin.. " <a href='event:+'>+")
			end
		end
	elseif cmd == "sp" then
		if args[1] == "team1" or args[1] == "t1" and tonumber(args[2]) ~= nil then Teams[1].points = args[2] 
		elseif args[1] == "team2" or args[1] == "t2" and tonumber(args[2]) ~= nil then Teams[2].points = args[2]
		elseif args[1] == "team3" or args[1] == "t3" and tonumber(args[2]) ~= nil then Teams[3].points = args[2]
		elseif args[1] == "team4" or args[1] == "t4" and tonumber(args[2]) ~= nil then Teams[4].points = args[2]
		end
		if GameStarted then mapName() end
	elseif cmd == "aj" then
		if args[1] == "on" then AutoJoin = true
		elseif args[1] == "off" then AutoJoin = false 
		end
		if not GameStarted then uparea(7, "Auto-join: <a href='event:OnAndOff'>"..(AutoJoin and "<vp>on</vp>" or not AutoJoin and "<r>off</r>")) end
	elseif cmd == "skip" and GameStarted or cmd == "s" and GameStarted then
		newMap()
	elseif cmd == "repeat" and GameStarted or cmd == "rt" and GameStarted then
		newGame(room.currentMap)
	elseif cmd == "np" then
		np_map = true
		map = args[1]
	elseif cmd == "antileve" or cmd == "anti" then
		anti_leve = true
	elseif cmd == "troll" then
		troll_map = true
	elseif (cmd == "team1" or cmd == "t1") or (cmd == "team2" or cmd == "t2") or nteams >= 3 and (cmd == "team3" or cmd == "t3") or nteams == 4 and (cmd == "team4" or cmd == "t4") then			
		for i, v in next, args do
			local team = tonumber(string.match(cmd, "%d+"))
				if i > 0 then
					if isPlayer(v) then
						for p=1,4 do table_clear(Teams[p].players, v) end
						table.insert(Teams[team].players, v)
					end
					if not GameStarted then TeamAreas() end
				end
		end
	elseif cmd == "remove" or cmd == "r" then
		for i, v in next, args do
			if i > 0 then
				for p=1,4 do table_clear(Teams[p].players, v) end
				if GameStarted then tfm.exec.killPlayer(v) else TeamAreas() end
			end
		end
	elseif cmd == "ban" then
		if isPlayer(args[1]) or table_contain(Playerslog, args[1]) then
			tfm.exec.killPlayer(args[1])
			mice_info[args[1]].ban = table_concat(args, " ", 2, math.min(20, #args)).."."
			mice_info[args[1]].imgban = tfm.exec.addImage("178f686f863.png", ":1", 153, -50, args[1])
			area(666, "<p align='center'>You have been banned from the room. Reason: "..mice_info[args[1]].ban, args[1], 300, 270, 200, 80, 0x1, 0x1, 0, true)
			area(6666, "<a href='event:close'><p align='center'>Close", args[1], 285, 365, 230, 20, 0x1, 0x1, 0, true)
			table.insert(Ban, args[1].." - "..mice_info[args[1]].ban) table.insert(PlayersBan, args[1])
			table_clear(Teams[1].players, args[1]) table_clear(Teams[2].players, args[1]) table_clear(Teams[3].players, args[1]) table_clear(Teams[4].players, args[1])
		end
	elseif cmd == "unban" then
		if table_contain(PlayersBan, args[1]) then
			rarea(666, args[1]) rarea(6666, args[1])
			tfm.exec.removeImage(mice_info[args[1]].imgban)
			table_clear(Ban, args[1].." - "..mice_info[args[1]].ban) table_clear(PlayersBan, args[1])
			if GameStarted and AutoJoin then Autojoin(args[1]) end
		end
	elseif cmd == "banlist" then
		area(667, "<font size='14'>								   Ban list 							<a href='event:close'>X</a></font>\n"..table_concat(Ban, "\n"), player, 150, 75, 500, 250, 0x1, 0xff8540, 0.5, false)
	elseif cmd == "admin" then
		if isPlayer(args[1]) and not table_contain(admin, args[1]) then
			table.insert(admin, args[1])
			area(1000, "<a href='event:info'><p align='center'>Commands", args[1], 35, -23, 80, 23, 0x1, 0xff8547, 0.4, true)
			if not GameStarted then AdminAreas(args[1]) PublicAreas(args[1]) end
		end
	elseif cmd == "unadmin" then
		if args[1] == room.loader then print("<r>[#] "..player.." tried remove you from admins.</r>") else table_clear(admin, args[1]) end
		if not GameStarted then for i=6,10 do rarea(i, args[1]) end PublicAreas(args[1]) end rarea(1000, args[1])
	elseif cmd == "vote" then
		Vote()
	elseif cmd == "help" then
		if mice_info[player].info == true then eventTextAreaCallback(998, player) end
		if mice_info[player].help == true then rarea(1001, player) mice_info[player].help = false
		else 
			mice_info[player].help = true 
			area(1001, "<p align='center'><font size='16' face='Tiems New Roman'><i>Commands</i></font>\n┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉</p><vp>!team1/2/3/4 <R>or</R> !t1/2/3/4</vp> [player] [player] - Add a player/s to the team.\n<vp>!clear </vp>all/team1/2/3/4 - Remove players from selected team.\n<vp>!remove <r>or</r> !r</vp> [player] [players] - Remove selected player/s from the team.\n<vp>!sp team1/2/3/4 <r>or</r> !sp t1/2/3/4</vp> [points] - Sets points for the selected team.\n<vp>!d</vp> [number] - Set the amount of points necessary to win.\n<vp>!skip <r>or</r> !s</vp> - Skip map.\n<vp>!repeat <r>or</r> !rt</vp> - Repeats the current map.\n<vp>!antileve <r>or</r> !anti</vp> - The next map will be antileve.\n<vp>!troll</vp> - The next map will be troll.\n<vp>!np</vp> [code] - Sets next map.\n<vp>!aj on</vp>/<r>off</r> - Turns AutoJoin on or off.\n<vp>!ban</vp> [player] [reason] <r>or</r> <vp>!unban</vp> [player] - Ban/unban player selected.\n<vp>!banlist</vp> - Shows a list of banned players.\n<vp>!admin <r>or</r> !unadmin</vp> [player] - Add/remove player to admins list.\n<vp>!vote</vp> - Starts a vote (Shows results automatically after 13s).\n<vp>!reset</vp> - Resets the script.\n<fc>!ms [message]</fc> - Send an orange message as [Funcorp]\n<p align='center'>┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉\n<p align='center'><a href='event:close'><r>CLOSE", player, 140, 50, 520, nil, 0x1e3d42, 0x8c5a3d, 1, true)
		end
	elseif cmd == "finish" and args[1] == "script" then
		system.exit()
	end
end
end

eventTextAreaCallback = function(id, player, cb)
	if isAdmin(player) then
		local i = 11
			for _, mode in next, Modes do
				if id == i then
					Mix = false
					Mode = cb
					uparea(5, "<p align='center'><font size='15' face='impact'><ch>Mode: "..(Mix and "Mix" or Mode).." <n2>  |  </n2> D: "..Pwin) 
				end
				i = i + 1 
			end
		if id == i then
			Mix = true
			Mode = "Racing"
			uparea(5, "<p align='center'><font size='15' face='impact'><ch>Mode: "..(Mix and "Mix" or Mode).." <n2>  |  </n2> D: "..Pwin)
		end
		if id == 6 then
			if #Teams[1].players > 0 or #Teams[2].players > 0 or #Teams[3].players > 0 or #Teams[4].players > 0 then
				for a=-1,i do rarea(a, nil) end
				for t=1,4 do Teams[t].points = 0 end
				for k in next, mice_info do tfm.exec.setPlayerScore(k, 0, false) mice_info[k].points = 0 end
				GameStarted = true
				newMap()
			end
		elseif id == 7 then
			AutoJoin = not AutoJoin
			uparea(7, "Auto-join: <a href='event:OnAndOff'>"..(AutoJoin and "<vp>on</vp>" or not AutoJoin and "<r>off</r>"))
		elseif id == 8 then
			if cb == "-" then
				if nteams == 4 then
					nteams = 3
					rarea(4)
				elseif nteams == 3 then 
					nteams = 2
					Teams[1].color = "DE3669"
					Teams[2].color = "4EA0EE"
					rarea(3)
				end
				TeamAreas()
				uparea(8, "Teams: <a href='event:-'>-</a> " ..nteams.. " <a href='event:+'>+")
			elseif cb == "+" then 
				if nteams == 2 then
					nteams = 3 
					Teams[1].color = "24CD23"
					Teams[2].color = "DE3669"
				elseif nteams == 3 then
					nteams = 4
				end
				TeamAreas()
				uparea(8, "Teams: <a href='event:-'>-</a> " ..nteams.. " <a href='event:+'>+")
			end
		elseif id == 9 and os.time() - Cooldown.fill > 1000 then
			FillTeams()
			TeamAreas()
			Cooldown.fill = os.time()
		elseif id == 10 then
			if cb == "-" then
				if Pwin > 1 then
					Pwin = Pwin - 1 
				end
			elseif cb == "+" then 
				if Pwin < 999 then
					Pwin = Pwin + 1
				end
			end
			uparea(5, "<p align='center'><font size='15' face='impact'><ch>Mode: "..(Mix and "Mix" or Mode).." <n2>  |  </n2> D: "..Pwin, nil)
			uparea(10, "Score: <a href='event:-'>-</a> " ..Pwin.. " <a href='event:+'>+")
		elseif id == 667 then
			rarea(667, player)
		elseif id == 1000 or id == 1001 then
			eventChatCommand(player, "help")
		end
	end
	if id == -4 then
		if mice_info[player].vote == false then 
			if cb == "mrc" then	vote.racing = vote.racing + 1
			elseif cb == "mbr" then vote.burlas = vote.burlas + 1
			elseif cb == "mbc" then vote.bootcamp = vote.bootcamp + 1
			elseif cb == "mvn" then	vote.vanilla = vote.vanilla + 1
			elseif cb == "mp1" then vote.normal = vote.normal + 1
			elseif cb == "mmix" then vote.mix = vote.mix + 1
			end
		end
		rarea(-4, player) mice_info[player].vote = true
	elseif id == 999 then
		if mice_info[player].help == true then rarea(1001, player) mice_info[player].help = false end
		if mice_info[player].info == true then mice_info[player].info = false rarea(998, player) else
		mice_info[player].info = true area(998, "<p align='center'><i><font size='16'>Info</font></i>\n┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉</p><vp>Admins:</vp> <r>"..room.loader.."</r> <bv>"..table_concat(admin, " ", 2, math.min(10, #admin)).."</bv>\n\n<vp>Important\n</vp>Guest and players with an account created less than 5 hours ago can't play here. This in order to avoid hackers. (<a href='event:noguest'>"..(NoGuest and "<vp>on</vp>" or not NoGuest and "<r>off</r>").."</a>)\n\n<vp>Credits\n</vp>Script made by <fc>Mattseba#0000</fc>.\nBurla maps by <ch2>Ctmce#0000</ch2> and <ch2>Gusly#7896</ch2>.\nVanilla maps by <ch2>Aspex#4517</ch2>, <ch2>Camjho#0000</ch2>, <ch2>Sebaslife#0000</ch2>, <ch2>Notheav#0000</ch2> and <ch2>me (Mattseba#0000)</ch2>.\nAntileve maps by <ch2>Vvarriorw#0095</ch2> (racing) and <ch2>me</ch2> (vanilla).\n\n<p align='center'>┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉\n<a href='event:close'><r>CLOSE</r></a></p>", player, 220, 70, 360, nil, 0x1e3d42, 0x8c5a3d, 1, true) end
	elseif id == 998 then
		if cb == "noguest" and isAdmin(player) then
			NoGuest = not NoGuest
			uparea(998, "<p align='center'><i><font size='16'>Info</font></i>\n┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉</p><vp>Admins:</vp> <r>"..room.loader.."</r> <bv>"..table_concat(admin, " ", 2, math.min(10, #admin)).."</bv>\n\n<vp>Important\n</vp>Guest and players with an account created less than 5 hours ago can't play here. This in order to avoid hackers. (<a href='event:noguest'>"..(NoGuest and "<vp>on</vp>" or not NoGuest and "<r>off</r>").."</a>)\n\n<vp>Credits\n</vp>Script made by <fc>Mattseba#0000</fc>.\nBurla maps by <ch2>Ctmce#0000</ch2> and <ch2>Gusly#7896</ch2>.\nVanilla maps by <ch2>Aspex#4517</ch2>, <ch2>Camjho#0000</ch2>, <ch2>Sebaslife#0000</ch2>, <ch2>Notheav#0000</ch2> and <ch2>me (Mattseba#0000)</ch2>.\nAntileve maps by <ch2>Vvarriorw#0095</ch2> (racing) and <ch2>me</ch2> (vanilla).\n\n<p align='center'>┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉┉\n<a href='event:close'><r>CLOSE</r></a></p>")
		elseif cb == "close" then
			mice_info[player].info = false 
			rarea(998, player)
		end
	elseif id == 6666 then
		tfm.exec.removeImage(mice_info[player].imgban)
		rarea(666, player) rarea(6666, player)
	end
end

eventLoop = function(elapsedTime, remainingTime)
	if remainingTime <= 500 and GameStarted and not Finish then newMap() end
	if FinishGame and os.time() >= FinishGame-1000 then	FinishGame = nil ResetScript() end
	if VoteOn and os.time() >= VoteOn then
		VoteOn = nil
		area(-4, "<p align='center'><font size='18' face='Times New Roman'><i>Results</i></font>\n┉┉┉┉┉┉┉┉┉┉┉┉</p><font size='14'>Racing: "..vote.racing.."\nBurlas: "..vote.burlas.."\nBootcamp: "..vote.bootcamp.."\nVanilla: "..vote.vanilla.."\nNormal (p1): "..vote.normal.."\nMix: "..vote.mix.."</font>\n<p align='center'>┉┉┉┉┉┉┉┉┉┉┉┉", nil, 325, 110, 150, 150, 0x1e3d42, 0x8c5a3d, 1, true)
		VoteResult = os.time() + 5000
	end
	if VoteResult and os.time() >= VoteResult then
		VoteResult = nil
		rarea(-4, nil) rarea(-3, nil)
	end
end

Main()
